var Bldg1_1 = function () {

var scope = this;
THREE.Geometry.call( this );

v(-15,0,15);
v(-15,82.1684,15);
v(15,0,15);
v(15,82.1684,15);
v(15,0,-15);
v(15,82.1684,-15);
v(-15,0,-15);
v(-15,82.1684,-15);
v(-10.7,82.1684,10.7);
v(10.7,82.1684,10.7);
v(10.7,82.1684,-10.7);
v(-10.7,82.1684,-10.7);
v(-10.7,98.40868,10.7);
v(10.7,98.40868,10.7);
v(10.7,98.40868,-10.7);
v(-10.7,98.40868,-10.7);
v(15,82.1684,15);
v(15,0,15);
v(15,82.1684,-15);
v(15,0,-15);
v(-15,0,15);
v(-15,82.1684,-15);
v(-15,82.1684,15);
v(-15,0,-15);
v(15,82.1684,15);
v(-15,82.1684,15);
v(15,82.1684,-15);
v(-15,82.1684,-15);
v(10.7,82.1684,10.7);
v(-10.7,98.40868,10.7);
v(10.7,98.40868,10.7);
v(-10.7,82.1684,10.7);
v(10.7,82.1684,-10.7);
v(10.7,98.40868,10.7);
v(10.7,98.40868,-10.7);
v(10.7,82.1684,10.7);
v(-10.7,82.1684,-10.7);
v(10.7,98.40868,-10.7);
v(-10.7,98.40868,-10.7);
v(10.7,82.1684,-10.7);
v(-10.7,82.1684,10.7);
v(-10.7,98.40868,-10.7);
v(-10.7,98.40868,10.7);
v(-10.7,82.1684,-10.7);

f3(1,2,3);
f3(0,2,1);
f3(16,4,5);
f3(17,4,16);
f3(18,6,7);
f3(19,6,18);
f3(21,20,22);
f3(23,20,21);
f3(15,13,14);
f3(12,13,15);
f3(29,28,30);
f3(31,28,29);
f3(33,32,34);
f3(35,32,33);
f3(37,36,38);
f3(39,36,37);
f3(41,40,42);
f3(43,40,41);
f3(26,9,24);
f3(10,9,26);
f3(27,10,26);
f3(11,10,27);
f3(25,11,27);
f3(8,11,25);
f3(24,8,25);
f3(9,8,24);


	this.computeCentroids();
	this.computeFaceNormals();
	this.sortFacesByMaterial();

	function v( x, y, z ) {
		scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );
	}

	function f3( a, b, c ) {
		scope.faces.push( new THREE.Face3( a, b, c ) );
	}
}

Bldg1_1.prototype = new THREE.Geometry();
Bldg1_1.prototype.constructor = Bldg1_1;

var Bldg2_1 = function () {

var scope = this;
THREE.Geometry.call( this );

v(-15,0,15);
v(-15,112.7092,15);
v(15,0,15);
v(15,112.7092,15);
v(15,0,-15);
v(15,112.7092,-15);
v(-15,0,-15);
v(-15,112.7092,-15);
v(-10.7,64.67037,10.7);
v(10.7,64.67037,10.7);
v(10.7,64.67037,-10.7);
v(-10.7,64.67037,-10.7);
v(-10.7,77.45222,10.7);
v(10.7,77.45222,10.7);
v(10.7,77.45222,-10.7);
v(-10.7,77.45222,-10.7);
v(15,112.7092,15);
v(15,0,15);
v(15,112.7092,-15);
v(15,0,-15);
v(-15,0,15);
v(-15,112.7092,-15);
v(-15,112.7092,15);
v(-15,0,-15);
v(-15,112.7092,-15);
v(15,112.7092,15);
v(-15,112.7092,15);
v(15,112.7092,-15);

f3(1,2,3);
f3(0,2,1);
f3(16,4,5);
f3(17,4,16);
f3(18,6,7);
f3(19,6,18);
f3(21,20,22);
f3(23,20,21);
f3(25,24,26);
f3(27,24,25);


	this.computeCentroids();
	this.computeFaceNormals();
	this.sortFacesByMaterial();

	function v( x, y, z ) {
		scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );
	}

	function f3( a, b, c ) {
		scope.faces.push( new THREE.Face3( a, b, c ) );
	}
}

Bldg2_1.prototype = new THREE.Geometry();
Bldg2_1.prototype.constructor = Bldg2_1;

var Bldg3_1 = function () {

var scope = this;
THREE.Geometry.call( this );

v(-15,0,15);
v(-15,35.31306,15);
v(15,0,15);
v(15,35.31306,15);
v(15,0,-15);
v(15,35.31306,-15);
v(-15,0,-15);
v(-15,35.31306,-15);
v(-1.524007,0,15);
v(-1.524007,35.31306,15);
v(-1.524006,0,-15);
v(-1.524008,35.31306,-15);
v(-15,52.41307,15);
v(-15,52.41307,-15);
v(-1.524007,52.41307,15);
v(-1.524008,52.41307,-15);
v(-15,6.143152,15);
v(15,6.143152,15);
v(15,6.143154,-15);
v(-15,6.143154,-15);
v(-1.524007,6.143154,15);
v(-1.524006,6.143152,-15);
v(-13.3,0,13.3);
v(13.3,0,13.3);
v(13.3,0,-13.3);
v(-13.3,0,-13.3);
v(-1.524007,0,13.3);
v(-1.524006,0,-13.3);
v(-13.3,6.143152,13.3);
v(13.3,6.143152,13.3);
v(13.3,6.143154,-13.3);
v(-13.3,6.143154,-13.3);
v(-1.524007,6.143154,13.3);
v(-1.524006,6.143152,-13.3);
v(-15,35.31306,-15);
v(-15,6.143154,-15);
v(-1.524008,35.31306,-15);
v(15,35.31306,15);
v(15,35.31306,-15);
v(-1.524008,35.31306,-15);
v(-1.524007,52.41307,15);
v(-1.524008,52.41307,-15);
v(-1.524007,35.31306,15);
v(-1.524008,52.41307,-15);
v(-15,52.41307,-15);
v(-15,52.41307,-15);
v(-15,52.41307,15);
v(-1.524007,35.31306,15);
v(-15,52.41307,15);
v(-1.524007,52.41307,15);
v(-15,35.31306,15);
v(15,6.143152,15);
v(15,35.31306,15);
v(13.3,6.143152,13.3);
v(13.3,0,-13.3);
v(13.3,0,13.3);
v(13.3,6.143154,-13.3);
v(-13.3,6.143154,-13.3);
v(-13.3,0,13.3);
v(-13.3,0,-13.3);
v(-13.3,6.143152,13.3);
v(-15,6.143152,15);
v(15,35.31306,-15);
v(15,6.143154,-15);
v(-1.524007,6.143154,15);
v(13.3,6.143152,13.3);
v(-1.524007,6.143154,13.3);
v(15,6.143152,15);
v(13.3,6.143154,-13.3);
v(15,6.143154,-15);
v(-15,6.143152,15);
v(-13.3,6.143152,13.3);
v(-1.524006,6.143152,-15);
v(-13.3,6.143154,-13.3);
v(-1.524006,6.143152,-13.3);
v(-15,6.143154,-15);

f3(32,23,29);
f3(26,23,32);
f3(22,26,32);
f3(3,18,5);
f3(17,18,3);
f3(21,11,62);
f3(7,11,21);
f3(19,7,21);
f3(1,46,45);
f3(34,1,45);
f3(16,1,34);
f3(35,16,34);
f3(37,36,9);
f3(38,36,37);
f3(22,32,28);
f3(33,27,25);
f3(24,27,33);
f3(30,24,33);
f3(12,15,13);
f3(14,15,12);
f3(40,39,41);
f3(42,39,40);
f3(43,7,44);
f3(11,7,43);
f3(50,61,20);
f3(47,50,20);
f3(48,50,47);
f3(49,48,47);
f3(47,51,52);
f3(20,51,47);
f3(54,53,55);
f3(56,53,54);
f3(31,33,25);
f3(58,57,59);
f3(60,57,58);
f3(63,21,62);
f3(70,66,64);
f3(71,66,70);
f3(75,71,70);
f3(73,71,75);
f3(72,73,75);
f3(74,73,72);
f3(69,74,72);
f3(68,74,69);
f3(67,68,69);
f3(65,68,67);
f3(64,65,67);
f3(66,65,64);


	this.computeCentroids();
	this.computeFaceNormals();
	this.sortFacesByMaterial();

	function v( x, y, z ) {
		scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );
	}

	function f3( a, b, c ) {
		scope.faces.push( new THREE.Face3( a, b, c ) );
	}
}

Bldg3_1.prototype = new THREE.Geometry();
Bldg3_1.prototype.constructor = Bldg3_1;

var Bldg4_1 = function () {

var scope = this;
THREE.Geometry.call( this );

v(-15,0,15);
v(-15,39.69824,15);
v(15,0,15);
v(15,39.69824,15);
v(15,0,-15);
v(15,39.69824,-15);
v(-15,0,-15);
v(-15,39.69824,-15);
v(-10.7,73.86942,10.7);
v(10.7,73.86942,10.7);
v(10.7,73.86942,-10.7);
v(-10.7,73.86942,-10.7);
v(-10.7,88.46942,10.7);
v(10.7,88.46942,10.7);
v(10.7,88.46942,-10.7);
v(-10.7,88.46942,-10.7);
v(10.52817,39.69824,15);
v(10.52818,39.69824,-15);
v(-10.32213,39.69824,15);
v(-10.32213,39.69824,-15);
v(10.52817,63.09824,15);
v(10.52818,63.09824,-15);
v(-10.32213,63.09824,15);
v(-10.32213,63.09824,-15);
v(6.928176,63.09824,11.4);
v(6.928176,63.09824,-11.4);
v(-6.722127,63.09824,11.4);
v(-6.722127,63.09824,-11.4);
v(6.928176,85.89825,11.4);
v(6.928176,85.89825,-11.4);
v(-6.722127,85.89825,11.4);
v(-6.722127,85.89825,-11.4);
v(4.328176,85.89825,8.800001);
v(4.328176,85.89825,-8.800001);
v(-4.122128,85.89825,8.800001);
v(-4.122128,85.89825,-8.800001);
v(4.328176,108.3982,8.800001);
v(4.328176,108.3982,-8.800001);
v(-4.122128,108.3982,8.800001);
v(-4.122128,108.3982,-8.800001);
v(0.1030254,115.2983,8.800003);
v(0.1030254,115.2983,-8.800003);
v(15,0,-15);
v(15,39.69824,15);
v(15,39.69824,-15);
v(15,0,15);
v(-15,0,15);
v(-15,39.69824,-15);
v(-15,39.69824,15);
v(-15,0,-15);
v(10.52818,39.69824,-15);
v(15,39.69824,15);
v(10.52817,39.69824,15);
v(15,39.69824,-15);
v(-10.32213,39.69824,-15);
v(-15,39.69824,15);
v(-15,39.69824,-15);
v(-10.32213,39.69824,15);
v(10.52818,39.69824,-15);
v(10.52817,39.69824,15);
v(10.52818,63.09824,-15);
v(-10.32213,39.69824,15);
v(-10.32213,63.09824,-15);
v(-10.32213,39.69824,-15);
v(-10.32213,63.09824,15);
v(10.52817,63.09824,15);
v(10.52818,63.09824,-15);
v(10.52817,63.09824,15);
v(-10.32213,63.09824,-15);
v(-10.32213,63.09824,15);
v(6.928176,63.09824,-11.4);
v(6.928176,63.09824,11.4);
v(-6.722127,63.09824,-11.4);
v(6.928176,85.89825,-11.4);
v(6.928176,63.09824,-11.4);
v(-6.722127,63.09824,11.4);
v(-6.722127,85.89825,-11.4);
v(-6.722127,63.09824,-11.4);
v(6.928176,63.09824,11.4);
v(-6.722127,85.89825,11.4);
v(6.928176,85.89825,11.4);
v(-6.722127,63.09824,11.4);
v(6.928176,85.89825,-11.4);
v(6.928176,85.89825,11.4);
v(-6.722127,85.89825,-11.4);
v(-6.722127,85.89825,11.4);
v(4.328176,85.89825,-8.800001);
v(4.328176,108.3982,8.800001);
v(4.328176,85.89825,8.800001);
v(-4.122128,85.89825,-8.800001);
v(4.328176,108.3982,-8.800001);
v(4.328176,85.89825,-8.800001);
v(-4.122128,85.89825,8.800001);
v(-4.122128,108.3982,-8.800001);
v(-4.122128,108.3982,8.800001);
v(-4.122128,85.89825,-8.800001);
v(4.328176,85.89825,8.800001);
v(-4.122128,85.89825,8.800001);
v(0.1030254,115.2983,8.800003);
v(0.1030254,115.2983,-8.800003);
v(0.1030254,115.2983,-8.800003);
v(0.1030254,115.2983,8.800003);

f3(0,18,1);
f3(16,18,0);
f3(2,16,0);
f3(3,16,2);
f3(6,5,4);
f3(17,5,6);
f3(19,17,6);
f3(60,17,19);
f3(23,60,19);
f3(7,19,6);
f3(43,42,44);
f3(45,42,43);
f3(47,46,48);
f3(49,46,47);
f3(51,50,52);
f3(53,50,51);
f3(38,36,40);
f3(96,36,38);
f3(97,96,38);
f3(55,54,56);
f3(57,54,55);
f3(20,58,21);
f3(59,58,20);
f3(62,61,22);
f3(63,61,62);
f3(64,16,65);
f3(18,16,64);
f3(28,70,29);
f3(71,70,28);
f3(73,72,31);
f3(74,72,73);
f3(76,75,30);
f3(77,75,76);
f3(79,78,80);
f3(81,78,79);
f3(37,41,98);
f3(87,37,98);
f3(86,37,87);
f3(88,86,87);
f3(90,39,99);
f3(89,39,90);
f3(91,89,90);
f3(94,101,100);
f3(93,94,100);
f3(92,94,93);
f3(95,92,93);
f3(68,25,66);
f3(27,25,68);
f3(69,27,68);
f3(26,27,69);
f3(67,26,69);
f3(24,26,67);
f3(66,24,67);
f3(25,24,66);
f3(84,33,82);
f3(35,33,84);
f3(85,35,84);
f3(34,35,85);
f3(83,34,85);
f3(32,34,83);
f3(82,32,83);
f3(33,32,82);


	this.computeCentroids();
	this.computeFaceNormals();
	this.sortFacesByMaterial();

	function v( x, y, z ) {
		scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );
	}

	function f3( a, b, c ) {
		scope.faces.push( new THREE.Face3( a, b, c ) );
	}
}

Bldg4_1.prototype = new THREE.Geometry();
Bldg4_1.prototype.constructor = Bldg4_1;

var Bldg5_1 = function () {

var scope = this;
THREE.Geometry.call( this );

v(-9.800001,0,13.5);
v(-9.800001,97.5991,13.5);
v(9.800001,97.5991,13.5);
v(9.800001,0,13.5);
v(13.5,0,9.800001);
v(13.5,97.5991,9.800001);
v(13.5,97.5991,-9.800001);
v(13.5,0,-9.800001);
v(-9.63,73.86942,9.63);
v(9.63,73.86942,9.63);
v(9.63,73.86942,-9.63);
v(-9.63,73.86942,-9.63);
v(-9.63,88.46942,9.63);
v(9.63,88.46942,9.63);
v(9.63,88.46942,-9.63);
v(-9.63,88.46942,-9.63);
v(9.800001,0,-13.5);
v(9.800001,97.5991,-13.5);
v(-9.800001,97.5991,-13.5);
v(-9.800001,0,-13.5);
v(-13.5,0,-9.800001);
v(-13.5,97.5991,-9.800001);
v(-13.5,97.5991,9.800001);
v(-13.5,0,9.800001);
v(13.5,97.5991,9.800001);
v(9.800001,97.5991,-13.5);
v(13.5,97.5991,-9.800001);
v(9.800001,97.5991,13.5);
v(-9.800001,97.5991,-13.5);
v(-13.5,97.5991,9.800001);
v(-9.800001,97.5991,13.5);
v(-13.5,97.5991,-9.800001);
v(-13.5,0,9.800001);
v(-13.5,97.5991,9.800001);
v(13.5,97.5991,9.800001);
v(13.5,0,9.800001);
v(13.5,0,-9.800001);
v(13.5,97.5991,-9.800001);
v(-13.5,97.5991,-9.800001);
v(-13.5,0,-9.800001);
v(-9.800001,97.5991,13.5);
v(-9.800001,0,13.5);
v(9.800001,97.5991,-13.5);
v(9.800001,0,-13.5);

f3(3,1,0);
f3(2,1,3);
f3(34,2,3);
f3(5,7,6);
f3(4,7,5);
f3(19,17,16);
f3(18,17,19);
f3(38,18,19);
f3(21,23,22);
f3(20,23,21);
f3(25,24,26);
f3(27,24,25);
f3(28,27,25);
f3(29,27,28);
f3(31,29,28);
f3(27,29,30);
f3(32,40,33);
f3(41,40,32);
f3(34,3,35);
f3(42,36,43);
f3(37,36,42);
f3(38,19,39);


	this.computeCentroids();
	this.computeFaceNormals();
	this.sortFacesByMaterial();

	function v( x, y, z ) {
		scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );
	}

	function f3( a, b, c ) {
		scope.faces.push( new THREE.Face3( a, b, c ) );
	}
}

Bldg5_1.prototype = new THREE.Geometry();
Bldg5_1.prototype.constructor = Bldg5_1;

var Bldg6_1 = function () {

var scope = this;
THREE.Geometry.call( this );

v(-15,0,15);
v(-15,39.34118,15);
v(7.699992,39.34118,15);
v(7.699992,0,15);
v(15,0,-15);
v(15,39.34118,-15);
v(-15,0,-15);
v(-15,39.34118,-15);
v(15,0,7.699992);
v(15,39.34118,7.699992);
v(15,0,-34.2);
v(15,39.34118,-34.2);
v(-15,0,-34.2);
v(-15,39.34118,-34.2);
v(-31.8,0,15);
v(-31.8,39.34118,15);
v(-31.8,0,-15);
v(-31.8,39.34118,-15);
v(-15,56.83155,15);
v(7.699992,56.83155,15);
v(15,56.83155,-15);
v(-15,56.83155,-15);
v(15,56.83155,7.699992);
v(-11.3,56.83155,11.3);
v(6.167401,56.83155,11.3);
v(11.3,56.83155,-11.3);
v(-11.3,56.83155,-11.3);
v(11.3,56.83155,6.167401);
v(-11.3,71.15009,11.3);
v(6.167401,71.15009,11.3);
v(11.3,71.15009,-11.3);
v(-11.3,71.15009,-11.3);
v(11.3,71.15009,6.167401);
v(15,39.34118,7.699992);
v(15,0,7.699992);
v(15,0,-34.2);
v(-15,0,-34.2);
v(15,0,-15);
v(-15,0,-34.2);
v(-15,39.34118,-34.2);
v(-15,0,-15);
v(15,39.34118,-15);
v(-15,39.34118,-34.2);
v(15,39.34118,-34.2);
v(-15,39.34118,-15);
v(15,39.34118,-34.2);
v(15,0,-34.2);
v(-15,0,15);
v(-31.8,0,-15);
v(-31.8,0,15);
v(-31.8,0,15);
v(-31.8,39.34118,15);
v(-31.8,39.34118,15);
v(-31.8,39.34118,-15);
v(-15,39.34118,15);
v(-15,0,-15);
v(-31.8,39.34118,-15);
v(-31.8,0,-15);
v(-15,39.34118,-15);
v(15,56.83155,7.699992);
v(15,56.83155,-15);
v(15,39.34118,-15);
v(-15,39.34118,15);
v(-15,56.83155,-15);
v(-15,56.83155,15);
v(15,56.83155,7.699992);
v(7.699992,56.83155,15);
v(15,56.83155,-15);
v(-15,56.83155,-15);
v(-15,56.83155,15);
v(11.3,56.83155,6.167401);
v(6.167401,71.15009,11.3);
v(11.3,71.15009,6.167401);
v(6.167401,56.83155,11.3);
v(11.3,56.83155,-11.3);
v(11.3,71.15009,6.167401);
v(11.3,71.15009,-11.3);
v(11.3,56.83155,6.167401);
v(-11.3,56.83155,-11.3);
v(11.3,71.15009,-11.3);
v(-11.3,71.15009,-11.3);
v(11.3,56.83155,-11.3);
v(-11.3,56.83155,11.3);
v(-11.3,71.15009,-11.3);
v(-11.3,71.15009,11.3);
v(-11.3,56.83155,-11.3);
v(-11.3,71.15009,11.3);
v(-11.3,56.83155,11.3);
v(-15,0,-15);
v(-15,39.34118,-15);
v(-15,39.34118,-15);
v(-15,39.34118,-15);

f3(5,20,59);
f3(9,5,59);
f3(4,5,9);
f3(8,4,9);
f3(11,12,13);
f3(10,12,11);
f3(17,14,15);
f3(16,14,17);
f3(29,31,28);
f3(30,31,29);
f3(32,30,29);
f3(2,64,1);
f3(3,2,1);
f3(33,2,3);
f3(34,33,3);
f3(35,6,36);
f3(37,6,35);
f3(38,7,39);
f3(40,7,38);
f3(42,41,43);
f3(44,41,42);
f3(45,4,46);
f3(5,4,45);
f3(48,47,49);
f3(88,47,48);
f3(1,0,3);
f3(50,0,1);
f3(51,50,1);
f3(52,89,53);
f3(54,89,52);
f3(56,55,57);
f3(58,55,56);
f3(19,33,22);
f3(2,33,19);
f3(64,2,19);
f3(60,90,21);
f3(61,90,60);
f3(63,62,18);
f3(91,62,63);
f3(73,86,87);
f3(71,86,73);
f3(70,71,73);
f3(72,71,70);
f3(75,74,76);
f3(77,74,75);
f3(79,78,80);
f3(81,78,79);
f3(83,82,84);
f3(85,82,83);
f3(67,27,65);
f3(25,27,67);
f3(68,25,67);
f3(26,25,68);
f3(69,26,68);
f3(23,26,69);
f3(66,23,69);
f3(24,23,66);
f3(65,24,66);
f3(27,24,65);


	this.computeCentroids();
	this.computeFaceNormals();
	this.sortFacesByMaterial();

	function v( x, y, z ) {
		scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );
	}

	function f3( a, b, c ) {
		scope.faces.push( new THREE.Face3( a, b, c ) );
	}
}

Bldg6_1.prototype = new THREE.Geometry();
Bldg6_1.prototype.constructor = Bldg6_1;

var Bldg7_1 = function () {

var scope = this;
THREE.Geometry.call( this );

v(-15,0,15);
v(-12,117.5069,6.689999);
v(15,0,15);
v(12,117.5069,6.689999);
v(15,0,-15);
v(12,117.5069,-6.689999);
v(-15,0,-15);
v(-12,117.5069,-6.689999);
v(-10.7,69.04956,10.7);
v(10.7,69.04956,10.7);
v(10.7,69.04956,-10.7);
v(-10.7,69.04956,-10.7);
v(-10.7,82.69694,10.7);
v(10.7,82.69694,10.7);
v(10.7,82.69694,-10.7);
v(-10.7,82.69694,-10.7);
v(12,117.5069,6.689999);
v(15,0,15);
v(12,117.5069,-6.689999);
v(15,0,-15);
v(-15,0,15);
v(-12,117.5069,-6.689999);
v(-12,117.5069,6.689999);
v(-15,0,-15);
v(-12,117.5069,-6.689999);
v(12,117.5069,6.689999);
v(-12,117.5069,6.689999);
v(12,117.5069,-6.689999);

f3(1,2,3);
f3(0,2,1);
f3(16,4,5);
f3(17,4,16);
f3(18,6,7);
f3(19,6,18);
f3(21,20,22);
f3(23,20,21);
f3(25,24,26);
f3(27,24,25);


	this.computeCentroids();
	this.computeFaceNormals();
	this.sortFacesByMaterial();

	function v( x, y, z ) {
		scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );
	}

	function f3( a, b, c ) {
		scope.faces.push( new THREE.Face3( a, b, c ) );
	}
}

Bldg7_1.prototype = new THREE.Geometry();
Bldg7_1.prototype.constructor = Bldg7_1;

var Bldg8_1 = function () {

var scope = this;
THREE.Geometry.call( this );

v(-12.34154,0,12.34154);
v(-12.34154,36.18997,12.34154);
v(12.34154,0,12.34154);
v(12.34154,36.18997,12.34154);
v(12.34154,0,-12.34154);
v(12.34154,36.18997,-12.34154);
v(-12.34154,0,-12.34154);
v(-12.34154,36.18997,-12.34154);
v(-8.803634,60.7775,8.803634);
v(8.803634,60.7775,8.803634);
v(8.803634,60.7775,-8.803634);
v(-8.803634,60.7775,-8.803634);
v(-8.803634,72.78994,8.803634);
v(8.803634,72.78994,8.803634);
v(8.803634,72.78994,-8.803634);
v(-8.803634,72.78994,-8.803634);
v(9.112072,0,12.34154);
v(9.112072,36.18997,12.34154);
v(9.11207,0,-12.34154);
v(9.112072,36.18997,-12.34154);
v(-7.668112,0,12.34154);
v(-7.668112,36.18997,12.34154);
v(-7.668114,0,-12.34154);
v(-7.668112,36.18997,-12.34154);
v(-12.34154,0,-8.527945);
v(-12.34154,36.18997,-8.527946);
v(12.34154,0,-8.527946);
v(12.34154,36.18997,-8.527946);
v(9.112072,71.12768,-8.527945);
v(-7.668112,71.12767,-8.527946);
v(-12.34154,0,7.816753);
v(-12.34154,36.18997,7.816751);
v(12.34154,0,7.816752);
v(12.34154,36.18997,7.816751);
v(9.112072,71.12767,7.816753);
v(-7.668112,71.12767,7.816751);
v(16.87544,0,16.87544);
v(16.87544,36.18997,16.87544);
v(9.112072,0,16.87544);
v(9.112072,36.18997,16.87544);
v(16.87544,0,7.816752);
v(16.87544,36.18997,7.816751);
v(-16.87544,0,-16.87544);
v(-16.87544,36.18997,-16.87544);
v(-7.668114,0,-16.87544);
v(-7.668112,36.18997,-16.87544);
v(-16.87544,0,-8.527945);
v(-16.87544,36.18997,-8.527946);
v(-16.87544,0,16.87544);
v(-16.87544,36.18997,16.87544);
v(-7.668112,0,16.87544);
v(-7.668112,36.18997,16.87544);
v(-16.87544,0,7.816753);
v(-16.87544,36.18997,7.816751);
v(16.87544,0,-16.87544);
v(16.87544,36.18997,-16.87544);
v(9.11207,0,-16.87544);
v(9.112072,36.18997,-16.87544);
v(16.87544,0,-8.527946);
v(16.87544,36.18997,-8.527946);
v(-12.34154,71.12767,12.34154);
v(12.34154,71.12767,12.34154);
v(12.34154,71.12767,-12.34154);
v(-12.34154,71.12768,-12.34154);
v(9.112072,71.12767,12.34154);
v(9.112072,71.12767,-12.34154);
v(-7.668112,71.12767,12.34154);
v(-7.668112,71.12768,-12.34154);
v(-12.34154,71.12767,-8.527946);
v(12.34154,71.12768,-8.527946);
v(-12.34154,71.12767,7.816751);
v(12.34154,71.12768,7.816751);
v(9.112066,107.5322,-8.52794);
v(-7.668118,107.5322,-8.527941);
v(9.112066,107.5322,7.816759);
v(-7.668118,107.5322,7.816757);
v(6.445065,107.5322,-5.86094);
v(-5.001118,107.5322,-5.86094);
v(6.445065,107.5322,5.149758);
v(-5.001118,107.5322,5.149756);
v(6.445065,136.4692,-5.86094);
v(-5.001118,136.4692,-5.86094);
v(6.445065,136.4692,5.149758);
v(-5.001118,136.4692,5.149756);
v(2.015391,151.5377,-1.599797);
v(-0.5714443,151.5377,-1.599797);
v(2.015391,151.5377,0.8886187);
v(-0.5714443,151.5377,0.8886184);
v(2.015391,168.8732,-1.599797);
v(-0.5714443,168.8732,-1.599797);
v(2.015391,168.8732,0.8886187);
v(-0.5714443,168.8732,0.8886184);
v(16.87544,36.18997,16.87544);
v(16.87544,0,16.87544);
v(-16.87544,0,16.87544);
v(-16.87544,36.18997,16.87544);
v(16.87544,36.18997,-16.87544);
v(16.87544,0,-16.87544);
v(-16.87544,0,-16.87544);
v(-16.87544,36.18997,-16.87544);
v(9.112072,0,12.34154);
v(9.112072,36.18997,16.87544);
v(9.112072,0,16.87544);
v(9.112072,36.18997,12.34154);
v(9.112072,0,16.87544);
v(16.87544,0,16.87544);
v(9.112072,0,12.34154);
v(9.112072,36.18997,12.34154);
v(16.87544,36.18997,16.87544);
v(9.112072,36.18997,16.87544);
v(12.34154,0,7.816752);
v(16.87544,0,7.816752);
v(12.34154,36.18997,7.816751);
v(16.87544,0,7.816752);
v(16.87544,36.18997,7.816751);
v(12.34154,0,7.816752);
v(16.87544,36.18997,7.816751);
v(12.34154,36.18997,7.816751);
v(-7.668114,0,-12.34154);
v(-7.668112,36.18997,-16.87544);
v(-7.668114,0,-16.87544);
v(-7.668112,36.18997,-12.34154);
v(-7.668114,0,-16.87544);
v(-16.87544,0,-16.87544);
v(-7.668114,0,-12.34154);
v(-7.668112,36.18997,-12.34154);
v(-16.87544,36.18997,-16.87544);
v(-7.668112,36.18997,-16.87544);
v(-12.34154,36.18997,-8.527946);
v(-16.87544,0,-8.527945);
v(-16.87544,36.18997,-8.527946);
v(-12.34154,0,-8.527945);
v(-16.87544,36.18997,-8.527946);
v(-12.34154,36.18997,-8.527946);
v(-12.34154,0,-8.527945);
v(-16.87544,0,-8.527945);
v(-12.34154,0,7.816753);
v(-16.87544,36.18997,7.816751);
v(-16.87544,0,7.816753);
v(-12.34154,36.18997,7.816751);
v(-16.87544,0,7.816753);
v(-16.87544,0,16.87544);
v(-12.34154,0,7.816753);
v(-12.34154,36.18997,7.816751);
v(-16.87544,36.18997,16.87544);
v(-16.87544,36.18997,7.816751);
v(-7.668112,36.18997,12.34154);
v(-7.668112,0,16.87544);
v(-7.668112,36.18997,16.87544);
v(-7.668112,0,12.34154);
v(-7.668112,36.18997,16.87544);
v(-7.668112,36.18997,12.34154);
v(-7.668112,0,12.34154);
v(-7.668112,0,16.87544);
v(9.112072,36.18997,-12.34154);
v(9.11207,0,-16.87544);
v(9.112072,36.18997,-16.87544);
v(9.11207,0,-12.34154);
v(9.112072,36.18997,-16.87544);
v(16.87544,36.18997,-16.87544);
v(9.112072,36.18997,-12.34154);
v(9.11207,0,-12.34154);
v(16.87544,0,-16.87544);
v(9.11207,0,-16.87544);
v(12.34154,0,-8.527946);
v(16.87544,36.18997,-8.527946);
v(16.87544,0,-8.527946);
v(12.34154,36.18997,-8.527946);
v(16.87544,0,-8.527946);
v(12.34154,0,-8.527946);
v(12.34154,36.18997,-8.527946);
v(16.87544,36.18997,-8.527946);
v(12.34154,36.18997,12.34154);
v(9.112072,71.12767,12.34154);
v(12.34154,71.12767,12.34154);
v(12.34154,71.12767,12.34154);
v(12.34154,71.12768,7.816751);
v(12.34154,36.18997,12.34154);
v(9.112072,71.12767,-12.34154);
v(-7.668112,71.12768,-12.34154);
v(-12.34154,36.18997,12.34154);
v(-12.34154,71.12767,7.816751);
v(-12.34154,71.12767,12.34154);
v(-12.34154,71.12767,12.34154);
v(-7.668112,71.12767,12.34154);
v(-12.34154,36.18997,12.34154);
v(12.34154,36.18997,-12.34154);
v(12.34154,71.12768,-8.527946);
v(12.34154,71.12767,-12.34154);
v(12.34154,71.12767,-12.34154);
v(12.34154,36.18997,-12.34154);
v(-12.34154,36.18997,-12.34154);
v(-12.34154,71.12768,-12.34154);
v(-12.34154,71.12768,-12.34154);
v(-12.34154,71.12767,-8.527946);
v(-12.34154,36.18997,-12.34154);
v(-7.668112,71.12767,-8.527946);
v(9.112072,71.12768,-8.527945);
v(-7.668112,71.12767,7.816751);
v(-7.668118,107.5322,-8.527941);
v(-7.668112,71.12767,-8.527946);
v(9.112072,71.12767,7.816753);
v(-7.668118,107.5322,7.816757);
v(-7.668112,71.12767,7.816751);
v(9.112072,71.12768,-8.527945);
v(9.112066,107.5322,7.816759);
v(9.112066,107.5322,-8.52794);
v(9.112072,71.12767,7.816753);
v(-7.668118,107.5322,-8.527941);
v(9.112066,107.5322,-8.52794);
v(-7.668118,107.5322,7.816757);
v(9.112066,107.5322,7.816759);
v(-5.001118,107.5322,-5.86094);
v(6.445065,107.5322,-5.86094);
v(-5.001118,107.5322,5.149756);
v(-5.001118,136.4692,-5.86094);
v(-5.001118,107.5322,-5.86094);
v(6.445065,107.5322,5.149758);
v(-5.001118,136.4692,5.149756);
v(-5.001118,107.5322,5.149756);
v(6.445065,107.5322,-5.86094);
v(6.445065,136.4692,5.149758);
v(6.445065,136.4692,-5.86094);
v(6.445065,107.5322,5.149758);
v(-0.5714443,151.5377,-1.599797);
v(-0.5714443,151.5377,0.8886184);
v(2.015391,151.5377,0.8886187);
v(2.015391,151.5377,-1.599797);
v(2.015391,168.8732,-1.599797);
v(-0.5714443,168.8732,-1.599797);
v(-0.5714443,168.8732,-1.599797);
v(-0.5714443,168.8732,0.8886184);
v(-0.5714443,168.8732,0.8886184);
v(2.015391,168.8732,0.8886187);
v(2.015391,168.8732,0.8886187);
v(2.015391,168.8732,-1.599797);

f3(37,38,36);
f3(39,38,37);
f3(92,40,41);
f3(93,40,92);
f3(43,44,42);
f3(45,44,43);
f3(49,52,48);
f3(53,52,49);
f3(21,184,183);
f3(17,184,21);
f3(20,17,21);
f3(16,17,20);
f3(54,57,55);
f3(56,57,54);
f3(19,178,189);
f3(23,178,19);
f3(18,23,19);
f3(22,23,18);
f3(94,51,95);
f3(50,51,94);
f3(96,58,97);
f3(59,58,96);
f3(98,47,99);
f3(46,47,98);
f3(34,64,61);
f3(71,34,61);
f3(28,34,71);
f3(69,28,71);
f3(65,28,69);
f3(62,65,69);
f3(90,89,91);
f3(88,89,90);
f3(33,176,175);
f3(27,176,33);
f3(32,27,33);
f3(26,27,32);
f3(25,194,193);
f3(31,194,25);
f3(24,31,25);
f3(30,31,24);
f3(101,100,102);
f3(103,100,101);
f3(105,110,111);
f3(2,110,105);
f3(104,2,105);
f3(106,2,104);
f3(3,116,117);
f3(108,116,3);
f3(107,108,3);
f3(109,108,107);
f3(113,112,114);
f3(115,112,113);
f3(119,118,120);
f3(121,118,119);
f3(123,134,135);
f3(6,134,123);
f3(122,6,123);
f3(124,6,122);
f3(7,132,133);
f3(126,132,7);
f3(125,126,7);
f3(127,126,125);
f3(129,128,130);
f3(131,128,129);
f3(137,136,138);
f3(139,136,137);
f3(141,152,153);
f3(0,152,141);
f3(140,0,141);
f3(142,0,140);
f3(1,150,151);
f3(144,150,1);
f3(143,144,1);
f3(145,144,143);
f3(147,146,148);
f3(149,146,147);
f3(155,154,156);
f3(157,154,155);
f3(159,170,171);
f3(5,170,159);
f3(158,5,159);
f3(160,5,158);
f3(4,168,169);
f3(162,168,4);
f3(161,162,4);
f3(163,162,161);
f3(165,164,166);
f3(167,164,165);
f3(173,172,174);
f3(17,172,173);
f3(184,17,173);
f3(177,33,175);
f3(181,180,182);
f3(31,180,181);
f3(194,31,181);
f3(185,21,183);
f3(187,186,188);
f3(27,186,187);
f3(176,27,187);
f3(190,19,189);
f3(179,191,192);
f3(23,191,179);
f3(178,23,179);
f3(195,25,193);
f3(72,196,73);
f3(197,196,72);
f3(199,198,75);
f3(200,198,199);
f3(202,201,74);
f3(203,201,202);
f3(205,204,206);
f3(207,204,205);
f3(85,229,228);
f3(84,85,228);
f3(81,85,84);
f3(80,81,84);
f3(212,81,80);
f3(213,212,80);
f3(87,231,230);
f3(224,87,230);
f3(83,87,224);
f3(215,83,224);
f3(214,83,215);
f3(216,214,215);
f3(86,233,232);
f3(225,86,232);
f3(82,86,225);
f3(218,82,225);
f3(217,82,218);
f3(219,217,218);
f3(227,235,234);
f3(226,227,234);
f3(222,227,226);
f3(221,222,226);
f3(220,222,221);
f3(223,220,221);
f3(29,63,68);
f3(67,63,29);
f3(28,67,29);
f3(65,67,28);
f3(35,66,64);
f3(60,66,35);
f3(70,60,35);
f3(68,35,29);
f3(70,35,68);
f3(34,35,64);
f3(210,77,208);
f3(79,77,210);
f3(211,79,210);
f3(78,79,211);
f3(209,78,211);
f3(76,78,209);
f3(208,76,209);
f3(77,76,208);


	this.computeCentroids();
	this.computeFaceNormals();
	this.sortFacesByMaterial();

	function v( x, y, z ) {
		scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );
	}

	function f3( a, b, c ) {
		scope.faces.push( new THREE.Face3( a, b, c ) );
	}
}

Bldg8_1.prototype = new THREE.Geometry();
Bldg8_1.prototype.constructor = Bldg8_1;

var Bldg9_1 = function () {

var scope = this;
THREE.Geometry.call( this );

v(-14,-40,14);
v(-14,-36,14);
v(-14,-32,14);
v(-14,-28,14);
v(-14,-24,14);
v(-14,-20,14);
v(-14,-16,14);
v(-14,-12,14);
v(-14,-8,14);
v(-14,-4,14);
v(-14,0,14);
v(-14,4,14);
v(-14,8,14);
v(-14,12,14);
v(-14,16,14);
v(-14,20,14);
v(-14,24,14);
v(-14,28,14);
v(-14,32,14);
v(-14,36,14);
v(-14,40,14);
v(14,-40,14);
v(14,-36,14);
v(14,-32,14);
v(14,-28,14);
v(14,-24,14);
v(14,-20,14);
v(14,-16,14);
v(14,-12,14);
v(14,-8,14);
v(14,-4,14);
v(14,0,14);
v(14,4,14);
v(14,8,14);
v(14,12,14);
v(14,16,14);
v(14,20,14);
v(14,24,14);
v(14,28,14);
v(14,32,14);
v(14,36,14);
v(14,40,14);
v(14,-40,-14);
v(14,-36,-14);
v(14,-32,-14);
v(14,-28,-14);
v(14,-24,-14);
v(14,-20,-14);
v(14,-16,-14);
v(14,-12,-14);
v(14,-8,-14);
v(14,-4,-14);
v(14,0,-14);
v(14,4,-14);
v(14,8,-14);
v(14,12,-14);
v(14,16,-14);
v(14,20,-14);
v(14,24,-14);
v(14,28,-14);
v(14,32,-14);
v(14,36,-14);
v(14,40,-14);
v(-14,-40,-14);
v(-14,-36,-14);
v(-14,-32,-14);
v(-14,-28,-14);
v(-14,-24,-14);
v(-14,-20,-14);
v(-14,-16,-14);
v(-14,-12,-14);
v(-14,-8,-14);
v(-14,-4,-14);
v(-14,0,-14);
v(-14,4,-14);
v(-14,8,-14);
v(-14,12,-14);
v(-14,16,-14);
v(-14,20,-14);
v(-14,24,-14);
v(-14,28,-14);
v(-14,32,-14);
v(-14,36,-14);
v(-14,40,-14);
v(-13.6,-36,13.6);
v(-13.6,-32,13.6);
v(13.6,-36,13.6);
v(13.6,-32,13.6);
v(13.6,-36,-13.6);
v(13.6,-32,-13.6);
v(-13.6,-36,-13.6);
v(-13.6,-32,-13.6);
v(-13.6,-28,13.6);
v(-13.6,-24,13.6);
v(13.6,-28,13.6);
v(13.6,-24,13.6);
v(13.6,-28,-13.6);
v(13.6,-24,-13.6);
v(-13.6,-28,-13.6);
v(-13.6,-24,-13.6);
v(-13.6,-20,13.6);
v(-13.6,-16,13.6);
v(13.6,-20,13.6);
v(13.6,-16,13.6);
v(13.6,-20,-13.6);
v(13.6,-16,-13.6);
v(-13.6,-20,-13.6);
v(-13.6,-16,-13.6);
v(-13.6,-12,13.6);
v(-13.6,-8,13.6);
v(13.6,-12,13.6);
v(13.6,-8,13.6);
v(13.6,-12,-13.6);
v(13.6,-8,-13.6);
v(-13.6,-12,-13.6);
v(-13.6,-8,-13.6);
v(-13.6,-4,13.6);
v(-13.6,0,13.6);
v(13.6,-4,13.6);
v(13.6,0,13.6);
v(13.6,-4,-13.6);
v(13.6,0,-13.6);
v(-13.6,-4,-13.6);
v(-13.6,0,-13.6);
v(-13.6,4,13.6);
v(-13.6,8,13.6);
v(13.6,4,13.6);
v(13.6,8,13.6);
v(13.6,4,-13.6);
v(13.6,8,-13.6);
v(-13.6,4,-13.6);
v(-13.6,8,-13.6);
v(-13.6,12,13.6);
v(-13.6,16,13.6);
v(13.6,12,13.6);
v(13.6,16,13.6);
v(13.6,12,-13.6);
v(13.6,16,-13.6);
v(-13.6,12,-13.6);
v(-13.6,16,-13.6);
v(-13.6,20,13.6);
v(-13.6,24,13.6);
v(13.6,20,13.6);
v(13.6,24,13.6);
v(13.6,20,-13.6);
v(13.6,24,-13.6);
v(-13.6,20,-13.6);
v(-13.6,24,-13.6);
v(-13.6,28,13.6);
v(-13.6,32,13.6);
v(13.6,28,13.6);
v(13.6,32,13.6);
v(13.6,28,-13.6);
v(13.6,32,-13.6);
v(-13.6,28,-13.6);
v(-13.6,32,-13.6);
v(-13.6,36,13.6);
v(-13.6,40,13.6);
v(13.6,36,13.6);
v(13.6,40,13.6);
v(13.6,36,-13.6);
v(13.6,40,-13.6);
v(-13.6,36,-13.6);
v(-13.6,40,-13.6);
v(-14,50.46999,14);
v(14,50.46999,14);
v(14,50.46999,-14);
v(-14,50.46999,-14);
v(14,-36,14);
v(14,-40,14);
v(13.6,-32,13.6);
v(13.6,-36,13.6);
v(14,-28,14);
v(14,-32,14);
v(13.6,-24,13.6);
v(13.6,-28,13.6);
v(14,-20,14);
v(14,-24,14);
v(13.6,-16,13.6);
v(13.6,-20,13.6);
v(14,-12,14);
v(14,-16,14);
v(13.6,-8,13.6);
v(13.6,-12,13.6);
v(14,-4,14);
v(14,-8,14);
v(13.6,0,13.6);
v(13.6,-4,13.6);
v(14,4,14);
v(14,0,14);
v(13.6,8,13.6);
v(13.6,4,13.6);
v(14,12,14);
v(14,8,14);
v(13.6,16,13.6);
v(13.6,12,13.6);
v(14,20,14);
v(14,16,14);
v(13.6,24,13.6);
v(13.6,20,13.6);
v(14,28,14);
v(14,24,14);
v(13.6,32,13.6);
v(13.6,28,13.6);
v(14,36,14);
v(14,32,14);
v(13.6,40,13.6);
v(13.6,36,13.6);
v(14,-36,-14);
v(14,-40,-14);
v(13.6,-32,-13.6);
v(13.6,-36,-13.6);
v(14,-28,-14);
v(14,-32,-14);
v(13.6,-24,-13.6);
v(13.6,-28,-13.6);
v(14,-20,-14);
v(14,-24,-14);
v(13.6,-16,-13.6);
v(13.6,-20,-13.6);
v(14,-12,-14);
v(14,-16,-14);
v(13.6,-8,-13.6);
v(13.6,-12,-13.6);
v(14,-4,-14);
v(14,-8,-14);
v(13.6,0,-13.6);
v(13.6,-4,-13.6);
v(14,4,-14);
v(14,0,-14);
v(13.6,8,-13.6);
v(13.6,4,-13.6);
v(14,12,-14);
v(14,8,-14);
v(13.6,16,-13.6);
v(13.6,12,-13.6);
v(14,20,-14);
v(14,16,-14);
v(13.6,24,-13.6);
v(13.6,20,-13.6);
v(14,28,-14);
v(14,24,-14);
v(13.6,32,-13.6);
v(13.6,28,-13.6);
v(14,36,-14);
v(14,32,-14);
v(13.6,40,-13.6);
v(13.6,36,-13.6);
v(-14,-40,14);
v(-14,-36,-14);
v(-14,-36,14);
v(-14,-40,-14);
v(-13.6,-36,13.6);
v(-13.6,-32,-13.6);
v(-13.6,-32,13.6);
v(-13.6,-36,-13.6);
v(-14,-32,14);
v(-14,-28,-14);
v(-14,-28,14);
v(-14,-32,-14);
v(-13.6,-28,13.6);
v(-13.6,-24,-13.6);
v(-13.6,-24,13.6);
v(-13.6,-28,-13.6);
v(-14,-24,14);
v(-14,-20,-14);
v(-14,-20,14);
v(-14,-24,-14);
v(-13.6,-20,13.6);
v(-13.6,-16,-13.6);
v(-13.6,-16,13.6);
v(-13.6,-20,-13.6);
v(-14,-16,14);
v(-14,-12,-14);
v(-14,-12,14);
v(-14,-16,-14);
v(-13.6,-12,13.6);
v(-13.6,-8,-13.6);
v(-13.6,-8,13.6);
v(-13.6,-12,-13.6);
v(-14,-8,14);
v(-14,-4,-14);
v(-14,-4,14);
v(-14,-8,-14);
v(-13.6,-4,13.6);
v(-13.6,0,-13.6);
v(-13.6,0,13.6);
v(-13.6,-4,-13.6);
v(-14,0,14);
v(-14,4,-14);
v(-14,4,14);
v(-14,0,-14);
v(-13.6,4,13.6);
v(-13.6,8,-13.6);
v(-13.6,8,13.6);
v(-13.6,4,-13.6);
v(-14,8,14);
v(-14,12,-14);
v(-14,12,14);
v(-14,8,-14);
v(-13.6,12,13.6);
v(-13.6,16,-13.6);
v(-13.6,16,13.6);
v(-13.6,12,-13.6);
v(-14,16,14);
v(-14,20,-14);
v(-14,20,14);
v(-14,16,-14);
v(-13.6,20,13.6);
v(-13.6,24,-13.6);
v(-13.6,24,13.6);
v(-13.6,20,-13.6);
v(-14,24,14);
v(-14,28,-14);
v(-14,28,14);
v(-14,24,-14);
v(-13.6,28,13.6);
v(-13.6,32,-13.6);
v(-13.6,32,13.6);
v(-13.6,28,-13.6);
v(-14,32,14);
v(-14,36,-14);
v(-14,36,14);
v(-14,32,-14);
v(-13.6,36,13.6);
v(-13.6,40,-13.6);
v(-13.6,40,13.6);
v(-13.6,36,-13.6);
v(14,-36,14);
v(-13.6,-36,13.6);
v(13.6,-36,13.6);
v(-14,-36,14);
v(-14,-32,14);
v(13.6,-32,13.6);
v(-13.6,-32,13.6);
v(14,-32,14);
v(14,-36,-14);
v(13.6,-36,-13.6);
v(13.6,-32,-13.6);
v(14,-32,-14);
v(-14,-36,-14);
v(-13.6,-36,-13.6);
v(-13.6,-32,-13.6);
v(-14,-32,-14);
v(14,-28,14);
v(-13.6,-28,13.6);
v(13.6,-28,13.6);
v(-14,-28,14);
v(-14,-24,14);
v(13.6,-24,13.6);
v(-13.6,-24,13.6);
v(14,-24,14);
v(14,-28,-14);
v(13.6,-28,-13.6);
v(13.6,-24,-13.6);
v(14,-24,-14);
v(-14,-28,-14);
v(-13.6,-28,-13.6);
v(-13.6,-24,-13.6);
v(-14,-24,-14);
v(14,-20,14);
v(-13.6,-20,13.6);
v(13.6,-20,13.6);
v(-14,-20,14);
v(-14,-16,14);
v(13.6,-16,13.6);
v(-13.6,-16,13.6);
v(14,-16,14);
v(14,-20,-14);
v(13.6,-20,-13.6);
v(13.6,-16,-13.6);
v(14,-16,-14);
v(-14,-20,-14);
v(-13.6,-20,-13.6);
v(-13.6,-16,-13.6);
v(-14,-16,-14);
v(14,-12,14);
v(-13.6,-12,13.6);
v(13.6,-12,13.6);
v(-14,-12,14);
v(-14,-8,14);
v(13.6,-8,13.6);
v(-13.6,-8,13.6);
v(14,-8,14);
v(14,-12,-14);
v(13.6,-12,-13.6);
v(13.6,-8,-13.6);
v(14,-8,-14);
v(-14,-12,-14);
v(-13.6,-12,-13.6);
v(-13.6,-8,-13.6);
v(-14,-8,-14);
v(14,-4,14);
v(-13.6,-4,13.6);
v(13.6,-4,13.6);
v(-14,-4,14);
v(-14,0,14);
v(13.6,0,13.6);
v(-13.6,0,13.6);
v(14,0,14);
v(14,-4,-14);
v(13.6,-4,-13.6);
v(13.6,0,-13.6);
v(14,0,-14);
v(-14,-4,-14);
v(-13.6,-4,-13.6);
v(-13.6,0,-13.6);
v(-14,0,-14);
v(14,4,14);
v(-13.6,4,13.6);
v(13.6,4,13.6);
v(-14,4,14);
v(-14,8,14);
v(13.6,8,13.6);
v(-13.6,8,13.6);
v(14,8,14);
v(14,4,-14);
v(13.6,4,-13.6);
v(13.6,8,-13.6);
v(14,8,-14);
v(-14,4,-14);
v(-13.6,4,-13.6);
v(-13.6,8,-13.6);
v(-14,8,-14);
v(14,12,14);
v(-13.6,12,13.6);
v(13.6,12,13.6);
v(-14,12,14);
v(-14,16,14);
v(13.6,16,13.6);
v(-13.6,16,13.6);
v(14,16,14);
v(14,12,-14);
v(13.6,12,-13.6);
v(13.6,16,-13.6);
v(14,16,-14);
v(-14,12,-14);
v(-13.6,12,-13.6);
v(-13.6,16,-13.6);
v(-14,16,-14);
v(14,20,14);
v(-13.6,20,13.6);
v(13.6,20,13.6);
v(-14,20,14);
v(-14,24,14);
v(13.6,24,13.6);
v(-13.6,24,13.6);
v(14,24,14);
v(14,20,-14);
v(13.6,20,-13.6);
v(13.6,24,-13.6);
v(14,24,-14);
v(-14,20,-14);
v(-13.6,20,-13.6);
v(-13.6,24,-13.6);
v(-14,24,-14);
v(14,28,14);
v(-13.6,28,13.6);
v(13.6,28,13.6);
v(-14,28,14);
v(-14,32,14);
v(13.6,32,13.6);
v(-13.6,32,13.6);
v(14,32,14);
v(14,28,-14);
v(13.6,28,-13.6);
v(13.6,32,-13.6);
v(14,32,-14);
v(-14,28,-14);
v(-13.6,28,-13.6);
v(-13.6,32,-13.6);
v(-14,32,-14);
v(14,36,14);
v(-13.6,36,13.6);
v(13.6,36,13.6);
v(-14,36,14);
v(-13.6,36,-13.6);
v(-14,36,-14);
v(14,36,-14);
v(13.6,36,-13.6);
v(-14,50.46999,14);
v(14,50.46999,14);
v(14,50.46999,14);
v(14,50.46999,-14);
v(14,40,14);
v(14,50.46999,-14);
v(-14,50.46999,-14);
v(14,40,-14);
v(-14,40,14);
v(-14,50.46999,-14);
v(-14,50.46999,14);
v(-14,40,-14);
v(14,40,14);
v(13.6,40,-13.6);
v(13.6,40,13.6);
v(14,40,-14);
v(-14,40,14);
v(-13.6,40,13.6);
v(-14,40,-14);
v(-13.6,40,-13.6);

f3(1,21,22);
f3(0,21,1);
f3(85,86,87);
f3(84,86,85);
f3(3,23,24);
f3(2,23,3);
f3(93,94,95);
f3(92,94,93);
f3(5,25,26);
f3(4,25,5);
f3(101,102,103);
f3(100,102,101);
f3(7,27,28);
f3(6,27,7);
f3(109,110,111);
f3(108,110,109);
f3(9,29,30);
f3(8,29,9);
f3(117,118,119);
f3(116,118,117);
f3(11,31,32);
f3(10,31,11);
f3(125,126,127);
f3(124,126,125);
f3(13,33,34);
f3(12,33,13);
f3(133,134,135);
f3(132,134,133);
f3(15,35,36);
f3(14,35,15);
f3(141,142,143);
f3(140,142,141);
f3(17,37,38);
f3(16,37,17);
f3(149,150,151);
f3(148,150,149);
f3(19,39,40);
f3(18,39,19);
f3(157,158,159);
f3(156,158,157);
f3(168,42,43);
f3(169,42,168);
f3(170,88,89);
f3(171,88,170);
f3(172,44,45);
f3(173,44,172);
f3(174,96,97);
f3(175,96,174);
f3(176,46,47);
f3(177,46,176);
f3(178,104,105);
f3(179,104,178);
f3(180,48,49);
f3(181,48,180);
f3(182,112,113);
f3(183,112,182);
f3(184,50,51);
f3(185,50,184);
f3(186,120,121);
f3(187,120,186);
f3(188,52,53);
f3(189,52,188);
f3(190,128,129);
f3(191,128,190);
f3(192,54,55);
f3(193,54,192);
f3(194,136,137);
f3(195,136,194);
f3(196,56,57);
f3(197,56,196);
f3(198,144,145);
f3(199,144,198);
f3(200,58,59);
f3(201,58,200);
f3(202,152,153);
f3(203,152,202);
f3(204,60,61);
f3(205,60,204);
f3(206,160,161);
f3(207,160,206);
f3(208,63,64);
f3(209,63,208);
f3(210,90,91);
f3(211,90,210);
f3(212,65,66);
f3(213,65,212);
f3(214,98,99);
f3(215,98,214);
f3(216,67,68);
f3(217,67,216);
f3(218,106,107);
f3(219,106,218);
f3(220,69,70);
f3(221,69,220);
f3(222,114,115);
f3(223,114,222);
f3(224,71,72);
f3(225,71,224);
f3(226,122,123);
f3(227,122,226);
f3(228,73,74);
f3(229,73,228);
f3(230,130,131);
f3(231,130,230);
f3(232,75,76);
f3(233,75,232);
f3(234,138,139);
f3(235,138,234);
f3(236,77,78);
f3(237,77,236);
f3(238,146,147);
f3(239,146,238);
f3(240,79,80);
f3(241,79,240);
f3(242,154,155);
f3(243,154,242);
f3(244,81,82);
f3(245,81,244);
f3(246,162,163);
f3(247,162,246);
f3(249,248,250);
f3(251,248,249);
f3(253,252,254);
f3(255,252,253);
f3(257,256,258);
f3(259,256,257);
f3(261,260,262);
f3(263,260,261);
f3(265,264,266);
f3(267,264,265);
f3(269,268,270);
f3(271,268,269);
f3(273,272,274);
f3(275,272,273);
f3(277,276,278);
f3(279,276,277);
f3(281,280,282);
f3(283,280,281);
f3(285,284,286);
f3(287,284,285);
f3(289,288,290);
f3(291,288,289);
f3(293,292,294);
f3(295,292,293);
f3(297,296,298);
f3(299,296,297);
f3(301,300,302);
f3(303,300,301);
f3(305,304,306);
f3(307,304,305);
f3(309,308,310);
f3(311,308,309);
f3(313,312,314);
f3(315,312,313);
f3(317,316,318);
f3(319,316,317);
f3(321,320,322);
f3(323,320,321);
f3(325,324,326);
f3(327,324,325);
f3(167,165,166);
f3(164,165,167);
f3(480,41,481);
f3(20,41,480);
f3(482,62,483);
f3(484,62,482);
f3(485,83,486);
f3(487,83,485);
f3(489,488,490);
f3(491,488,489);
f3(336,330,328);
f3(337,330,336);
f3(340,337,336);
f3(341,337,340);
f3(331,341,340);
f3(329,341,331);
f3(328,329,331);
f3(330,329,328);
f3(343,334,332);
f3(342,334,343);
f3(339,342,343);
f3(338,342,339);
f3(335,338,339);
f3(333,338,335);
f3(332,333,335);
f3(334,333,332);
f3(352,346,344);
f3(353,346,352);
f3(356,353,352);
f3(357,353,356);
f3(347,357,356);
f3(345,357,347);
f3(344,345,347);
f3(346,345,344);
f3(359,350,348);
f3(358,350,359);
f3(355,358,359);
f3(354,358,355);
f3(351,354,355);
f3(349,354,351);
f3(348,349,351);
f3(350,349,348);
f3(368,362,360);
f3(369,362,368);
f3(372,369,368);
f3(373,369,372);
f3(363,373,372);
f3(361,373,363);
f3(360,361,363);
f3(362,361,360);
f3(375,366,364);
f3(374,366,375);
f3(371,374,375);
f3(370,374,371);
f3(367,370,371);
f3(365,370,367);
f3(364,365,367);
f3(366,365,364);
f3(384,378,376);
f3(385,378,384);
f3(388,385,384);
f3(389,385,388);
f3(379,389,388);
f3(377,389,379);
f3(376,377,379);
f3(378,377,376);
f3(391,382,380);
f3(390,382,391);
f3(387,390,391);
f3(386,390,387);
f3(383,386,387);
f3(381,386,383);
f3(380,381,383);
f3(382,381,380);
f3(400,394,392);
f3(401,394,400);
f3(404,401,400);
f3(405,401,404);
f3(395,405,404);
f3(393,405,395);
f3(392,393,395);
f3(394,393,392);
f3(407,398,396);
f3(406,398,407);
f3(403,406,407);
f3(402,406,403);
f3(399,402,403);
f3(397,402,399);
f3(396,397,399);
f3(398,397,396);
f3(416,410,408);
f3(417,410,416);
f3(420,417,416);
f3(421,417,420);
f3(411,421,420);
f3(409,421,411);
f3(408,409,411);
f3(410,409,408);
f3(423,414,412);
f3(422,414,423);
f3(419,422,423);
f3(418,422,419);
f3(415,418,419);
f3(413,418,415);
f3(412,413,415);
f3(414,413,412);
f3(432,426,424);
f3(433,426,432);
f3(436,433,432);
f3(437,433,436);
f3(427,437,436);
f3(425,437,427);
f3(424,425,427);
f3(426,425,424);
f3(439,430,428);
f3(438,430,439);
f3(435,438,439);
f3(434,438,435);
f3(431,434,435);
f3(429,434,431);
f3(428,429,431);
f3(430,429,428);
f3(448,442,440);
f3(449,442,448);
f3(452,449,448);
f3(453,449,452);
f3(443,453,452);
f3(441,453,443);
f3(440,441,443);
f3(442,441,440);
f3(455,446,444);
f3(454,446,455);
f3(451,454,455);
f3(450,454,451);
f3(447,450,451);
f3(445,450,447);
f3(444,445,447);
f3(446,445,444);
f3(464,458,456);
f3(465,458,464);
f3(468,465,464);
f3(469,465,468);
f3(459,469,468);
f3(457,469,459);
f3(456,457,459);
f3(458,457,456);
f3(471,462,460);
f3(470,462,471);
f3(467,470,471);
f3(466,470,467);
f3(463,466,467);
f3(461,466,463);
f3(460,461,463);
f3(462,461,460);
f3(478,474,472);
f3(479,474,478);
f3(477,479,478);
f3(476,479,477);
f3(475,476,477);
f3(473,476,475);
f3(472,473,475);
f3(474,473,472);
f3(496,494,492);
f3(497,494,496);
f3(498,497,496);
f3(499,497,498);
f3(495,499,498);
f3(493,499,495);
f3(492,493,495);
f3(494,493,492);


	this.computeCentroids();
	this.computeFaceNormals();
	this.sortFacesByMaterial();

	function v( x, y, z ) {
		scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );
	}

	function f3( a, b, c ) {
		scope.faces.push( new THREE.Face3( a, b, c ) );
	}
}

Bldg9_1.prototype = new THREE.Geometry();
Bldg9_1.prototype.constructor = Bldg9_1;

var Ground = function () {

var scope = this;
THREE.Geometry.call( this );

v(-250,0,250);
v(250,0,250);
v(-250,0,-250);
v(250,0,-250);
v(-112.5,0,250);
v(-112.5,0,-250);
v(-87.5,0,250);
v(-87.5,0,-250);
v(87.5,0,250);
v(87.5,0,-250);
v(112.5,0,250);
v(112.5,0,-250);
v(-250,0,12.49998);
v(250,0,12.5);
v(-112.5,0,12.49998);
v(-87.5,0,12.5);
v(87.5,0,12.49998);
v(112.5,0,12.5);
v(-250,0,-12.5);
v(250,0,-12.5);
v(-112.5,0,-12.5);
v(-87.5,0,-12.5);
v(87.5,0,-12.5);
v(112.5,0,-12.5);
v(-112.5,-0.2,250);
v(-112.5,-0.2,-250);
v(-87.5,-0.2,250);
v(-87.5,-0.2,-250);
v(87.5,-0.2,250);
v(87.5,-0.2,-250);
v(112.5,-0.2,250);
v(112.5,-0.2,-250);
v(-250,-0.2,12.49998);
v(250,-0.2,12.5);
v(-112.5,-0.2,12.49998);
v(-87.5,-0.2,12.5);
v(87.5,-0.2,12.49998);
v(112.5,-0.2,12.5);
v(-250,-0.2,-12.5);
v(250,-0.2,-12.5);
v(-112.5,-0.2,-12.5);
v(-87.5,-0.2,-12.5);
v(87.5,-0.2,-12.5);
v(112.5,-0.2,-12.5);
v(250,0,-12.5);
v(-87.5,0,-12.5);
v(87.5,0,-12.5);
v(250,0,12.5);
v(-87.5,0,-250);
v(-87.5,-0.2,-12.5);
v(-87.5,0,-12.5);
v(-87.5,0,12.5);
v(87.5,0,12.49998);
v(-87.5,-0.2,-250);
v(-87.5,0,-250);
v(-112.5,-0.2,-250);
v(-112.5,0,-250);
v(112.5,0,-250);
v(112.5,0,-12.5);
v(-112.5,0,-12.5);
v(-112.5,0,-250);
v(87.5,0,-250);
v(112.5,-0.2,-250);
v(112.5,0,-250);
v(87.5,0,-12.5);
v(87.5,-0.2,-250);
v(87.5,-0.2,-12.5);
v(87.5,0,-250);
v(-87.5,0,12.5);
v(-87.5,-0.2,12.5);
v(-87.5,0,250);
v(-112.5,0,250);
v(-112.5,0,12.49998);
v(-87.5,0,250);
v(-112.5,-0.2,250);
v(-87.5,-0.2,250);
v(-112.5,0,250);
v(112.5,0,12.5);
v(112.5,0,250);
v(87.5,0,250);
v(87.5,-0.2,12.49998);
v(87.5,0,12.49998);
v(112.5,0,250);
v(87.5,-0.2,250);
v(112.5,-0.2,250);
v(87.5,0,250);
v(-112.5,0,12.49998);
v(-112.5,-0.2,12.49998);
v(-250,0,12.49998);
v(-250,0,-12.5);
v(-112.5,-0.2,-12.5);
v(-112.5,0,-12.5);
v(-250,0,12.49998);
v(-250,-0.2,-12.5);
v(-250,-0.2,12.49998);
v(-250,0,-12.5);
v(112.5,0,-12.5);
v(250,-0.2,-12.5);
v(112.5,-0.2,-12.5);
v(250,0,-12.5);
v(250,0,12.5);
v(112.5,-0.2,12.5);
v(250,-0.2,12.5);
v(112.5,0,12.5);

f3(3,23,19);
f3(11,23,3);
f3(0,14,12);
f3(4,14,0);
f3(33,44,39);
f3(13,44,33);
f3(7,22,9);
f3(21,22,7);
f3(42,45,41);
f3(46,45,42);
f3(1,17,10);
f3(47,17,1);
f3(35,16,36);
f3(15,16,35);
f3(49,48,27);
f3(50,48,49);
f3(8,51,6);
f3(52,51,8);
f3(53,5,25);
f3(54,5,53);
f3(55,20,40);
f3(56,20,55);
f3(43,57,31);
f3(58,57,43);
f3(2,59,60);
f3(18,59,2);
f3(62,61,29);
f3(63,61,62);
f3(65,64,66);
f3(67,64,65);
f3(26,68,69);
f3(70,68,26);
f3(34,71,24);
f3(72,71,34);
f3(74,73,75);
f3(76,73,74);
f3(30,77,37);
f3(78,77,30);
f3(80,79,28);
f3(81,79,80);
f3(83,82,84);
f3(85,82,83);
f3(32,86,87);
f3(88,86,32);
f3(90,89,38);
f3(91,89,90);
f3(93,92,94);
f3(95,92,93);
f3(97,96,98);
f3(99,96,97);
f3(101,100,102);
f3(103,100,101);


	this.computeCentroids();
	this.computeFaceNormals();
	this.sortFacesByMaterial();

	function v( x, y, z ) {
		scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );
	}

	function f3( a, b, c ) {
		scope.faces.push( new THREE.Face3( a, b, c ) );
	}
}

Ground.prototype = new THREE.Geometry();
Ground.prototype.constructor = Ground;

var Streets = function () {

var scope = this;
THREE.Geometry.call( this );

v(-112.5,-0.2,250);
v(-112.5,-0.2,-250);
v(-87.5,-0.2,250);
v(-87.5,-0.2,-250);
v(87.5,-0.2,250);
v(87.5,-0.2,-250);
v(112.5,-0.2,250);
v(112.5,-0.2,-250);
v(-250,-0.2,12.49998);
v(250,-0.2,12.5);
v(-112.5,-0.2,12.49998);
v(-87.5,-0.2,12.5);
v(87.5,-0.2,12.49998);
v(112.5,-0.2,12.5);
v(-250,-0.2,-12.5);
v(250,-0.2,-12.5);
v(-112.5,-0.2,-12.5);
v(-87.5,-0.2,-12.5);
v(87.5,-0.2,-12.5);
v(112.5,-0.2,-12.5);

f3(10,14,8);
f3(16,14,10);
f3(11,16,10);
f3(17,16,11);
f3(12,17,11);
f3(18,17,12);
f3(13,18,12);
f3(19,18,13);
f3(9,19,13);
f3(15,19,9);
f3(11,0,2);
f3(10,0,11);
f3(13,4,6);
f3(12,4,13);
f3(1,17,3);
f3(16,17,1);
f3(5,19,7);
f3(18,19,5);


	this.computeCentroids();
	this.computeFaceNormals();
	this.sortFacesByMaterial();

	function v( x, y, z ) {
		scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );
	}

	function f3( a, b, c ) {
		scope.faces.push( new THREE.Face3( a, b, c ) );
	}
}

Streets.prototype = new THREE.Geometry();
Streets.prototype.constructor = Streets;

var Subway = function () {

var scope = this;
THREE.Geometry.call( this );

v(-9.999999,-0.5,15);
v(-9.999999,0.5,15);
v(9.999999,-0.5,15);
v(9.999999,0.5,15);
v(9.999999,-0.5,-15);
v(9.999999,0.5,-15);
v(-9.999999,-0.5,-15);
v(-9.999999,0.5,-15);
v(-9.999999,-0.5,-13.63853);
v(-9.999999,0.5,-13.63853);
v(9.999999,-0.5,-13.63853);
v(9.999999,0.5,-13.63853);
v(-8.424118,-0.5,15);
v(-8.424118,0.5,15);
v(-8.424118,-0.5,-15);
v(-8.424118,0.5,-15);
v(-8.424118,-0.5,-13.63853);
v(-8.424118,0.5,-13.63853);
v(8.495605,-0.5,15);
v(8.495605,0.5,15);
v(8.495605,-0.5,-15);
v(8.495605,0.5,-15);
v(8.495605,-0.5,-13.63853);
v(8.495605,0.5,-13.63853);
v(9.999999,-7.139998,-15);
v(9.999999,-7.139998,-13.63853);
v(8.495605,-7.139998,-15);
v(8.495605,-7.139998,-13.63853);
v(-9.999999,-7.139998,-15);
v(-9.999999,-7.139998,-13.63853);
v(-8.424118,-7.139998,-15);
v(-8.424118,-7.139998,-13.63853);
v(9.999999,-0.5,-45);
v(9.999999,0.5,-45);
v(-9.999999,-0.5,-45);
v(-9.999999,0.5,-45);
v(-9.999999,-0.5,-43.63853);
v(-9.999999,0.5,-43.63853);
v(9.999999,-0.5,-43.63853);
v(9.999999,0.5,-43.63853);
v(-8.424118,-0.5,-45);
v(-8.424118,0.5,-45);
v(-8.424118,-0.5,-43.63853);
v(-8.424118,0.5,-43.63853);
v(8.495605,0.5,-15);
v(8.495605,-0.5,-45);
v(8.495605,0.5,-45);
v(8.495605,-0.5,-43.63853);
v(8.495605,0.5,-43.63853);
v(9.999999,-7.139998,-45);
v(9.999999,-7.139998,-43.63853);
v(8.495605,-7.139998,-45);
v(8.495605,-7.139998,-43.63853);
v(-9.999999,-7.139998,-45);
v(-9.999999,-7.139998,-43.63853);
v(-8.424118,-7.139998,-45);
v(-8.424118,-7.139998,-43.63853);
v(9.999999,-0.5,-75);
v(9.999999,0.5,-75);
v(-9.999999,-0.5,-75);
v(-9.999999,0.5,-75);
v(-9.999999,-0.5,-73.63852);
v(-9.999999,0.5,-73.63852);
v(9.999999,-0.5,-73.63852);
v(9.999999,0.5,-73.63852);
v(-8.424118,-0.5,-75);
v(-8.424118,0.5,-75);
v(-8.424118,-0.5,-73.63852);
v(-8.424118,0.5,-73.63852);
v(8.495605,0.5,-45);
v(8.495605,-0.5,-75);
v(8.495605,0.5,-75);
v(8.495605,-0.5,-73.63852);
v(8.495605,0.5,-73.63852);
v(9.999999,-7.139998,-75);
v(9.999999,-7.139998,-73.63852);
v(8.495605,-7.139998,-75);
v(8.495605,-7.139998,-73.63852);
v(-9.999999,-7.139998,-75);
v(-9.999999,-7.139998,-73.63852);
v(-8.424118,-7.139998,-75);
v(-8.424118,-7.139998,-73.63852);
v(9.999999,-0.5,-105);
v(9.999999,0.5,-105);
v(-9.999999,-0.5,-105);
v(-9.999999,0.5,-105);
v(-9.999999,-0.5,-103.6385);
v(-9.999999,0.5,-103.6385);
v(9.999999,-0.5,-103.6385);
v(9.999999,0.5,-103.6385);
v(-8.424118,-0.5,-105);
v(-8.424118,0.5,-105);
v(-8.424118,-0.5,-103.6385);
v(-8.424118,0.5,-103.6385);
v(8.495605,0.5,-75);
v(8.495605,-0.5,-105);
v(8.495605,0.5,-105);
v(8.495605,-0.5,-103.6385);
v(8.495605,0.5,-103.6385);
v(9.999999,-7.139998,-105);
v(9.999999,-7.139998,-103.6385);
v(8.495605,-7.139998,-105);
v(8.495605,-7.139998,-103.6385);
v(-9.999999,-7.139998,-105);
v(-9.999999,-7.139998,-103.6385);
v(-8.424118,-7.139998,-105);
v(-8.424118,-7.139998,-103.6385);
v(9.999999,-0.5,-135);
v(9.999999,0.5,-135);
v(-9.999999,-0.5,-135);
v(-9.999999,0.5,-135);
v(-9.999999,-0.5,-133.6385);
v(-9.999999,0.5,-133.6385);
v(9.999999,-0.5,-133.6385);
v(9.999999,0.5,-133.6385);
v(-8.424118,-0.5,-135);
v(-8.424118,0.5,-135);
v(-8.424118,-0.5,-133.6385);
v(-8.424118,0.5,-133.6385);
v(8.495605,0.5,-105);
v(8.495605,-0.5,-135);
v(8.495605,0.5,-135);
v(8.495605,-0.5,-133.6385);
v(8.495605,0.5,-133.6385);
v(9.999999,-7.139998,-135);
v(9.999999,-7.139998,-133.6385);
v(8.495605,-7.139998,-135);
v(8.495605,-7.139998,-133.6385);
v(-9.999999,-7.139998,-135);
v(-9.999999,-7.139998,-133.6385);
v(-8.424118,-7.139998,-135);
v(-8.424118,-7.139998,-133.6385);
v(9.999999,-0.5,-165);
v(9.999999,0.5,-165);
v(-9.999999,-0.5,-165);
v(-9.999999,0.5,-165);
v(-9.999999,-0.5,-163.6385);
v(-9.999999,0.5,-163.6385);
v(9.999999,-0.5,-163.6385);
v(9.999999,0.5,-163.6385);
v(-8.424118,-0.5,-165);
v(-8.424118,0.5,-165);
v(-8.424118,-0.5,-163.6385);
v(-8.424118,0.5,-163.6385);
v(8.495605,0.5,-135);
v(8.495605,-0.5,-165);
v(8.495605,0.5,-165);
v(8.495605,-0.5,-163.6385);
v(8.495605,0.5,-163.6385);
v(9.999999,-7.139998,-165);
v(9.999999,-7.139998,-163.6385);
v(8.495605,-7.139998,-165);
v(8.495605,-7.139998,-163.6385);
v(-9.999999,-7.139998,-165);
v(-9.999999,-7.139998,-163.6385);
v(-8.424118,-7.139998,-165);
v(-8.424118,-7.139998,-163.6385);
v(9.999999,-0.5,-195);
v(9.999999,0.5,-195);
v(-9.999999,-0.5,-195);
v(-9.999999,0.5,-195);
v(-9.999999,-0.5,-193.6385);
v(-9.999999,0.5,-193.6385);
v(9.999999,-0.5,-193.6385);
v(9.999999,0.5,-193.6385);
v(-8.424118,-0.5,-195);
v(-8.424118,0.5,-195);
v(-8.424118,-0.5,-193.6385);
v(-8.424118,0.5,-193.6385);
v(8.495605,0.5,-165);
v(8.495605,-0.5,-195);
v(8.495605,0.5,-195);
v(8.495605,-0.5,-193.6385);
v(8.495605,0.5,-193.6385);
v(9.999999,-7.139998,-195);
v(9.999999,-7.139998,-193.6385);
v(8.495605,-7.139998,-195);
v(8.495605,-7.139998,-193.6385);
v(-9.999999,-7.139998,-195);
v(-9.999999,-7.139998,-193.6385);
v(-8.424118,-7.139998,-195);
v(-8.424118,-7.139998,-193.6385);
v(9.999999,-0.5,-225);
v(9.999999,0.5,-225);
v(-9.999999,-0.5,-225);
v(-9.999999,0.5,-225);
v(-9.999999,-0.5,-223.6385);
v(-9.999999,0.5,-223.6385);
v(9.999999,-0.5,-223.6385);
v(9.999999,0.5,-223.6385);
v(-8.424118,-0.5,-225);
v(-8.424118,0.5,-225);
v(-8.424118,-0.5,-223.6385);
v(-8.424118,0.5,-223.6385);
v(8.495605,0.5,-195);
v(8.495605,-0.5,-225);
v(8.495605,0.5,-225);
v(8.495605,-0.5,-223.6385);
v(8.495605,0.5,-223.6385);
v(9.999999,-7.139998,-225);
v(9.999999,-7.139998,-223.6385);
v(8.495605,-7.139998,-225);
v(8.495605,-7.139998,-223.6385);
v(-9.999999,-7.139998,-225);
v(-9.999999,-7.139998,-223.6385);
v(-8.424118,-7.139998,-225);
v(-8.424118,-7.139998,-223.6385);
v(9.999999,-0.5,-255);
v(9.999999,0.5,-255);
v(-9.999999,-0.5,-255);
v(-9.999999,0.5,-255);
v(-9.999999,-0.5,-253.6385);
v(-9.999999,0.5,-253.6385);
v(9.999999,-0.5,-253.6385);
v(9.999999,0.5,-253.6385);
v(-8.424118,-0.5,-255);
v(-8.424118,0.5,-255);
v(-8.424118,-0.5,-253.6385);
v(-8.424118,0.5,-253.6385);
v(8.495605,0.5,-225);
v(8.495605,-0.5,-255);
v(8.495605,0.5,-255);
v(8.495605,-0.5,-253.6385);
v(8.495605,0.5,-253.6385);
v(9.999999,-7.139998,-255);
v(9.999999,-7.139998,-253.6385);
v(8.495605,-7.139998,-255);
v(8.495605,-7.139998,-253.6385);
v(-9.999999,-7.139998,-255);
v(-9.999999,-7.139998,-253.6385);
v(-8.424118,-7.139998,-255);
v(-8.424118,-7.139998,-253.6385);
v(9.999999,-0.5,-285);
v(9.999999,0.5,-285);
v(-9.999999,-0.5,-285);
v(-9.999999,0.5,-285);
v(-9.999999,-0.5,-283.6385);
v(-9.999999,0.5,-283.6385);
v(9.999999,-0.5,-283.6385);
v(9.999999,0.5,-283.6385);
v(-8.424118,-0.5,-285);
v(-8.424118,0.5,-285);
v(-8.424118,-0.5,-283.6385);
v(-8.424118,0.5,-283.6385);
v(8.495605,0.5,-255);
v(8.495605,-0.5,-285);
v(8.495605,0.5,-285);
v(8.495605,-0.5,-283.6385);
v(8.495605,0.5,-283.6385);
v(9.999999,-7.139998,-285);
v(9.999999,-7.139998,-283.6385);
v(8.495605,-7.139998,-285);
v(8.495605,-7.139998,-283.6385);
v(-9.999999,-7.139998,-285);
v(-9.999999,-7.139998,-283.6385);
v(-8.424118,-7.139998,-285);
v(-8.424118,-7.139998,-283.6385);
v(9.999999,-0.5,-315);
v(9.999999,0.5,-315);
v(-9.999999,-0.5,-315);
v(-9.999999,0.5,-315);
v(-9.999999,-0.5,-313.6385);
v(-9.999999,0.5,-313.6385);
v(9.999999,-0.5,-313.6385);
v(9.999999,0.5,-313.6385);
v(-8.424118,-0.5,-315);
v(-8.424118,0.5,-315);
v(-8.424118,-0.5,-313.6385);
v(-8.424118,0.5,-313.6385);
v(8.495605,0.5,-285);
v(8.495605,-0.5,-315);
v(8.495605,0.5,-315);
v(8.495605,-0.5,-313.6385);
v(8.495605,0.5,-313.6385);
v(9.999999,-7.139998,-315);
v(9.999999,-7.139998,-313.6385);
v(8.495605,-7.139998,-315);
v(8.495605,-7.139998,-313.6385);
v(-9.999999,-7.139998,-315);
v(-9.999999,-7.139998,-313.6385);
v(-8.424118,-7.139998,-315);
v(-8.424118,-7.139998,-313.6385);
v(9.999999,-0.5,-345);
v(9.999999,0.5,-345);
v(-9.999999,-0.5,-345);
v(-9.999999,0.5,-345);
v(-9.999999,-0.5,-343.6385);
v(-9.999999,0.5,-343.6385);
v(9.999999,-0.5,-343.6385);
v(9.999999,0.5,-343.6385);
v(-8.424118,-0.5,-345);
v(-8.424118,0.5,-345);
v(-8.424118,-0.5,-343.6385);
v(-8.424118,0.5,-343.6385);
v(8.495605,0.5,-315);
v(8.495605,-0.5,-345);
v(8.495605,0.5,-345);
v(8.495605,-0.5,-343.6385);
v(8.495605,0.5,-343.6385);
v(9.999999,-7.139998,-345);
v(9.999999,-7.139998,-343.6385);
v(8.495605,-7.139998,-345);
v(8.495605,-7.139998,-343.6385);
v(-9.999999,-7.139998,-345);
v(-9.999999,-7.139998,-343.6385);
v(-8.424118,-7.139998,-345);
v(-8.424118,-7.139998,-343.6385);
v(9.999999,-0.5,-375);
v(9.999999,0.5,-375);
v(-9.999999,-0.5,-375);
v(-9.999999,0.5,-375);
v(-9.999999,-0.5,-373.6385);
v(-9.999999,0.5,-373.6385);
v(9.999999,-0.5,-373.6385);
v(9.999999,0.5,-373.6385);
v(-8.424118,-0.5,-375);
v(-8.424118,0.5,-375);
v(-8.424118,-0.5,-373.6385);
v(-8.424118,0.5,-373.6385);
v(8.495605,0.5,-345);
v(8.495605,-0.5,-375);
v(8.495605,0.5,-375);
v(8.495605,-0.5,-373.6385);
v(8.495605,0.5,-373.6385);
v(9.999999,-7.139998,-375);
v(9.999999,-7.139998,-373.6385);
v(8.495605,-7.139998,-375);
v(8.495605,-7.139998,-373.6385);
v(-9.999999,-7.139998,-375);
v(-9.999999,-7.139998,-373.6385);
v(-8.424118,-7.139998,-375);
v(-8.424118,-7.139998,-373.6385);
v(9.999999,-0.5,-405);
v(9.999999,0.5,-405);
v(-9.999999,-0.5,-405);
v(-9.999999,0.5,-405);
v(-9.999999,-0.5,-403.6385);
v(-9.999999,0.5,-403.6385);
v(9.999999,-0.5,-403.6385);
v(9.999999,0.5,-403.6385);
v(-8.424118,-0.5,-405);
v(-8.424118,0.5,-405);
v(-8.424118,-0.5,-403.6385);
v(-8.424118,0.5,-403.6385);
v(8.495605,0.5,-375);
v(8.495605,-0.5,-405);
v(8.495605,0.5,-405);
v(8.495605,-0.5,-403.6385);
v(8.495605,0.5,-403.6385);
v(9.999999,-7.139998,-405);
v(9.999999,-7.139998,-403.6385);
v(8.495605,-7.139998,-405);
v(8.495605,-7.139998,-403.6385);
v(-9.999999,-7.139998,-405);
v(-9.999999,-7.139998,-403.6385);
v(-8.424118,-7.139998,-405);
v(-8.424118,-7.139998,-403.6385);
v(9.999999,-0.5,-435);
v(9.999999,0.5,-435);
v(-9.999999,-0.5,-435);
v(-9.999999,0.5,-435);
v(-9.999999,-0.5,-433.6385);
v(-9.999999,0.5,-433.6385);
v(9.999999,-0.5,-433.6385);
v(9.999999,0.5,-433.6385);
v(-8.424118,-0.5,-435);
v(-8.424118,0.5,-435);
v(-8.424118,-0.5,-433.6385);
v(-8.424118,0.5,-433.6385);
v(8.495605,0.5,-405);
v(8.495605,-0.5,-435);
v(8.495605,0.5,-435);
v(8.495605,-0.5,-433.6385);
v(8.495605,0.5,-433.6385);
v(9.999999,-7.139998,-435);
v(9.999999,-7.139998,-433.6385);
v(8.495605,-7.139998,-435);
v(8.495605,-7.139998,-433.6385);
v(-9.999999,-7.139998,-435);
v(-9.999999,-7.139998,-433.6385);
v(-8.424118,-7.139998,-435);
v(-8.424118,-7.139998,-433.6385);
v(9.999999,-0.5,-465);
v(9.999999,0.5,-465);
v(-9.999999,-0.5,-465);
v(-9.999999,0.5,-465);
v(-9.999999,-0.5,-463.6385);
v(-9.999999,0.5,-463.6385);
v(9.999999,-0.5,-463.6385);
v(9.999999,0.5,-463.6385);
v(-8.424118,-0.5,-465);
v(-8.424118,0.5,-465);
v(-8.424118,-0.5,-463.6385);
v(-8.424118,0.5,-463.6385);
v(8.495605,0.5,-435);
v(8.495605,-0.5,-465);
v(8.495605,0.5,-465);
v(8.495605,-0.5,-463.6385);
v(8.495605,0.5,-463.6385);
v(9.999999,-7.139998,-465);
v(9.999999,-7.139998,-463.6385);
v(8.495605,-7.139998,-465);
v(8.495605,-7.139998,-463.6385);
v(-9.999999,-7.139998,-465);
v(-9.999999,-7.139998,-463.6385);
v(-8.424118,-7.139998,-465);
v(-8.424118,-7.139998,-463.6385);
v(9.999999,-0.5,-495);
v(9.999999,0.5,-495);
v(-9.999999,-0.5,-495);
v(-9.999999,0.5,-495);
v(-9.999999,-0.5,-493.6385);
v(-9.999999,0.5,-493.6385);
v(9.999999,-0.5,-493.6385);
v(9.999999,0.5,-493.6385);
v(-8.424118,-0.5,-495);
v(-8.424118,0.5,-495);
v(-8.424118,-0.5,-493.6385);
v(-8.424118,0.5,-493.6385);
v(8.495605,0.5,-465);
v(8.495605,-0.5,-495);
v(8.495605,0.5,-495);
v(8.495605,-0.5,-493.6385);
v(8.495605,0.5,-493.6385);
v(9.999999,-7.139998,-495);
v(9.999999,-7.139998,-493.6385);
v(8.495605,-7.139998,-495);
v(8.495605,-7.139998,-493.6385);
v(-9.999999,-7.139998,-495);
v(-9.999999,-7.139998,-493.6385);
v(-8.424118,-7.139998,-495);
v(-8.424118,-7.139998,-493.6385);
v(-9.999999,-0.5,-13.63853);
v(9.999999,0.5,-13.63853);
v(-9.999999,-7.139998,-13.63853);
v(9.999999,0.5,15);
v(-9.999999,0.5,-15);
v(-9.999999,0.5,-13.63853);
v(-8.424118,-0.5,-13.63853);
v(-9.999999,-0.5,15);
v(-9.999999,-0.5,-13.63853);
v(8.495605,-0.5,-13.63853);
v(8.495605,-7.139998,-13.63853);
v(9.999999,-0.5,-13.63853);
v(9.999999,-0.5,-15);
v(8.495605,-7.139998,-15);
v(8.495605,-0.5,-15);
v(-9.999999,0.5,15);
v(-9.999999,-7.139998,-15);
v(-9.999999,-0.5,-15);
v(8.495605,-0.5,-13.63853);
v(-8.424118,-0.5,-13.63853);
v(-8.424118,-7.139998,-15);
v(-8.424118,-7.139998,-13.63853);
v(-8.424118,-0.5,-15);
v(-8.424118,-0.5,-15);
v(8.495605,-0.5,-15);
v(9.999999,-7.139998,-15);
v(9.999999,-7.139998,-13.63853);
v(9.999999,0.5,-15);
v(9.999999,-0.5,15);
v(9.999999,-0.5,-13.63853);
v(-9.999999,-0.5,-43.63853);
v(9.999999,0.5,-43.63853);
v(-9.999999,-7.139998,-43.63853);
v(-9.999999,0.5,-45);
v(-9.999999,0.5,-43.63853);
v(-8.424118,-0.5,-43.63853);
v(-9.999999,-0.5,-15);
v(-9.999999,-0.5,-43.63853);
v(8.495605,-0.5,-43.63853);
v(8.495605,-7.139998,-43.63853);
v(9.999999,-0.5,-43.63853);
v(9.999999,-0.5,-45);
v(8.495605,-7.139998,-45);
v(8.495605,-0.5,-45);
v(-9.999999,-7.139998,-45);
v(-9.999999,-0.5,-45);
v(8.495605,-0.5,-43.63853);
v(-8.424118,-0.5,-43.63853);
v(-8.424118,-7.139998,-45);
v(-8.424118,-7.139998,-43.63853);
v(-8.424118,-0.5,-45);
v(-8.424118,-0.5,-45);
v(8.495605,-0.5,-45);
v(9.999999,-7.139998,-45);
v(9.999999,-7.139998,-43.63853);
v(9.999999,0.5,-45);
v(9.999999,-0.5,-15);
v(9.999999,-0.5,-43.63853);
v(-9.999999,-0.5,-73.63852);
v(9.999999,0.5,-73.63852);
v(-9.999999,-7.139998,-73.63852);
v(-9.999999,0.5,-75);
v(-9.999999,0.5,-73.63852);
v(-8.424118,-0.5,-73.63852);
v(-9.999999,-0.5,-45);
v(-9.999999,-0.5,-73.63852);
v(8.495605,-0.5,-73.63852);
v(8.495605,-7.139998,-73.63852);
v(9.999999,-0.5,-73.63852);
v(9.999999,-0.5,-75);
v(8.495605,-7.139998,-75);
v(8.495605,-0.5,-75);
v(-9.999999,-7.139998,-75);
v(-9.999999,-0.5,-75);
v(8.495605,-0.5,-73.63852);
v(-8.424118,-0.5,-73.63852);
v(-8.424118,-7.139998,-75);
v(-8.424118,-7.139998,-73.63852);
v(-8.424118,-0.5,-75);
v(-8.424118,-0.5,-75);
v(8.495605,-0.5,-75);
v(9.999999,-7.139998,-75);
v(9.999999,-7.139998,-73.63852);
v(9.999999,0.5,-75);
v(9.999999,-0.5,-45);
v(9.999999,-0.5,-73.63852);
v(-9.999999,-0.5,-103.6385);
v(9.999999,0.5,-103.6385);
v(-9.999999,-7.139998,-103.6385);
v(-9.999999,0.5,-105);
v(-9.999999,0.5,-103.6385);
v(-8.424118,-0.5,-103.6385);
v(-9.999999,-0.5,-75);
v(-9.999999,-0.5,-103.6385);
v(8.495605,-0.5,-103.6385);
v(8.495605,-7.139998,-103.6385);
v(9.999999,-0.5,-103.6385);
v(9.999999,-0.5,-105);
v(8.495605,-7.139998,-105);
v(8.495605,-0.5,-105);
v(-9.999999,-7.139998,-105);
v(-9.999999,-0.5,-105);
v(8.495605,-0.5,-103.6385);
v(-8.424118,-0.5,-103.6385);
v(-8.424118,-7.139998,-105);
v(-8.424118,-7.139998,-103.6385);
v(-8.424118,-0.5,-105);
v(-8.424118,-0.5,-105);
v(8.495605,-0.5,-105);
v(9.999999,-7.139998,-105);
v(9.999999,-7.139998,-103.6385);
v(9.999999,0.5,-105);
v(9.999999,-0.5,-75);
v(9.999999,-0.5,-103.6385);
v(-9.999999,-0.5,-133.6385);
v(9.999999,0.5,-133.6385);
v(-9.999999,-7.139998,-133.6385);
v(-9.999999,0.5,-135);
v(-9.999999,0.5,-133.6385);
v(-8.424118,-0.5,-133.6385);
v(-9.999999,-0.5,-105);
v(-9.999999,-0.5,-133.6385);
v(8.495605,-0.5,-133.6385);
v(8.495605,-7.139998,-133.6385);
v(9.999999,-0.5,-133.6385);
v(9.999999,-0.5,-135);
v(8.495605,-7.139998,-135);
v(8.495605,-0.5,-135);
v(-9.999999,-7.139998,-135);
v(-9.999999,-0.5,-135);
v(8.495605,-0.5,-133.6385);
v(-8.424118,-0.5,-133.6385);
v(-8.424118,-7.139998,-135);
v(-8.424118,-7.139998,-133.6385);
v(-8.424118,-0.5,-135);
v(-8.424118,-0.5,-135);
v(8.495605,-0.5,-135);
v(9.999999,-7.139998,-135);
v(9.999999,-7.139998,-133.6385);
v(9.999999,0.5,-135);
v(9.999999,-0.5,-105);
v(9.999999,-0.5,-133.6385);
v(-9.999999,-0.5,-163.6385);
v(9.999999,0.5,-163.6385);
v(-9.999999,-7.139998,-163.6385);
v(-9.999999,0.5,-165);
v(-9.999999,0.5,-163.6385);
v(-8.424118,-0.5,-163.6385);
v(-9.999999,-0.5,-135);
v(-9.999999,-0.5,-163.6385);
v(8.495605,-0.5,-163.6385);
v(8.495605,-7.139998,-163.6385);
v(9.999999,-0.5,-163.6385);
v(9.999999,-0.5,-165);
v(8.495605,-7.139998,-165);
v(8.495605,-0.5,-165);
v(-9.999999,-7.139998,-165);
v(-9.999999,-0.5,-165);
v(8.495605,-0.5,-163.6385);
v(-8.424118,-0.5,-163.6385);
v(-8.424118,-7.139998,-165);
v(-8.424118,-7.139998,-163.6385);
v(-8.424118,-0.5,-165);
v(-8.424118,-0.5,-165);
v(8.495605,-0.5,-165);
v(9.999999,-7.139998,-165);
v(9.999999,-7.139998,-163.6385);
v(9.999999,0.5,-165);
v(9.999999,-0.5,-135);
v(9.999999,-0.5,-163.6385);
v(-9.999999,-0.5,-193.6385);
v(9.999999,0.5,-193.6385);
v(-9.999999,-7.139998,-193.6385);
v(-9.999999,0.5,-195);
v(-9.999999,0.5,-193.6385);
v(-8.424118,-0.5,-193.6385);
v(-9.999999,-0.5,-165);
v(-9.999999,-0.5,-193.6385);
v(8.495605,-0.5,-193.6385);
v(8.495605,-7.139998,-193.6385);
v(9.999999,-0.5,-193.6385);
v(9.999999,-0.5,-195);
v(8.495605,-7.139998,-195);
v(8.495605,-0.5,-195);
v(-9.999999,-7.139998,-195);
v(-9.999999,-0.5,-195);
v(8.495605,-0.5,-193.6385);
v(-8.424118,-0.5,-193.6385);
v(-8.424118,-7.139998,-195);
v(-8.424118,-7.139998,-193.6385);
v(-8.424118,-0.5,-195);
v(-8.424118,-0.5,-195);
v(8.495605,-0.5,-195);
v(9.999999,-7.139998,-195);
v(9.999999,-7.139998,-193.6385);
v(9.999999,0.5,-195);
v(9.999999,-0.5,-165);
v(9.999999,-0.5,-193.6385);
v(-9.999999,-0.5,-223.6385);
v(9.999999,0.5,-223.6385);
v(-9.999999,-7.139998,-223.6385);
v(-9.999999,0.5,-225);
v(-9.999999,0.5,-223.6385);
v(-8.424118,-0.5,-223.6385);
v(-9.999999,-0.5,-195);
v(-9.999999,-0.5,-223.6385);
v(8.495605,-0.5,-223.6385);
v(8.495605,-7.139998,-223.6385);
v(9.999999,-0.5,-223.6385);
v(9.999999,-0.5,-225);
v(8.495605,-7.139998,-225);
v(8.495605,-0.5,-225);
v(-9.999999,-7.139998,-225);
v(-9.999999,-0.5,-225);
v(8.495605,-0.5,-223.6385);
v(-8.424118,-0.5,-223.6385);
v(-8.424118,-7.139998,-225);
v(-8.424118,-7.139998,-223.6385);
v(-8.424118,-0.5,-225);
v(-8.424118,-0.5,-225);
v(8.495605,-0.5,-225);
v(9.999999,-7.139998,-225);
v(9.999999,-7.139998,-223.6385);
v(9.999999,0.5,-225);
v(9.999999,-0.5,-195);
v(9.999999,-0.5,-223.6385);
v(-9.999999,-0.5,-253.6385);
v(9.999999,0.5,-253.6385);
v(-9.999999,-7.139998,-253.6385);
v(-9.999999,0.5,-255);
v(-9.999999,0.5,-253.6385);
v(-8.424118,-0.5,-253.6385);
v(-9.999999,-0.5,-225);
v(-9.999999,-0.5,-253.6385);
v(8.495605,-0.5,-253.6385);
v(8.495605,-7.139998,-253.6385);
v(9.999999,-0.5,-253.6385);
v(9.999999,-0.5,-255);
v(8.495605,-7.139998,-255);
v(8.495605,-0.5,-255);
v(-9.999999,-7.139998,-255);
v(-9.999999,-0.5,-255);
v(8.495605,-0.5,-253.6385);
v(-8.424118,-0.5,-253.6385);
v(-8.424118,-7.139998,-255);
v(-8.424118,-7.139998,-253.6385);
v(-8.424118,-0.5,-255);
v(-8.424118,-0.5,-255);
v(8.495605,-0.5,-255);
v(9.999999,-7.139998,-255);
v(9.999999,-7.139998,-253.6385);
v(9.999999,0.5,-255);
v(9.999999,-0.5,-225);
v(9.999999,-0.5,-253.6385);
v(-9.999999,-0.5,-283.6385);
v(9.999999,0.5,-283.6385);
v(-9.999999,-7.139998,-283.6385);
v(-9.999999,0.5,-285);
v(-9.999999,0.5,-283.6385);
v(-8.424118,-0.5,-283.6385);
v(-9.999999,-0.5,-255);
v(-9.999999,-0.5,-283.6385);
v(8.495605,-0.5,-283.6385);
v(8.495605,-7.139998,-283.6385);
v(9.999999,-0.5,-283.6385);
v(9.999999,-0.5,-285);
v(8.495605,-7.139998,-285);
v(8.495605,-0.5,-285);
v(-9.999999,-7.139998,-285);
v(-9.999999,-0.5,-285);
v(8.495605,-0.5,-283.6385);
v(-8.424118,-0.5,-283.6385);
v(-8.424118,-7.139998,-285);
v(-8.424118,-7.139998,-283.6385);
v(-8.424118,-0.5,-285);
v(-8.424118,-0.5,-285);
v(8.495605,-0.5,-285);
v(9.999999,-7.139998,-285);
v(9.999999,-7.139998,-283.6385);
v(9.999999,0.5,-285);
v(9.999999,-0.5,-255);
v(9.999999,-0.5,-283.6385);
v(-9.999999,-0.5,-313.6385);
v(9.999999,0.5,-313.6385);
v(-9.999999,-7.139998,-313.6385);
v(-9.999999,0.5,-315);
v(-9.999999,0.5,-313.6385);
v(-8.424118,-0.5,-313.6385);
v(-9.999999,-0.5,-285);
v(-9.999999,-0.5,-313.6385);
v(8.495605,-0.5,-313.6385);
v(8.495605,-7.139998,-313.6385);
v(9.999999,-0.5,-313.6385);
v(9.999999,-0.5,-315);
v(8.495605,-7.139998,-315);
v(8.495605,-0.5,-315);
v(-9.999999,-7.139998,-315);
v(-9.999999,-0.5,-315);
v(8.495605,-0.5,-313.6385);
v(-8.424118,-0.5,-313.6385);
v(-8.424118,-7.139998,-315);
v(-8.424118,-7.139998,-313.6385);
v(-8.424118,-0.5,-315);
v(-8.424118,-0.5,-315);
v(8.495605,-0.5,-315);
v(9.999999,-7.139998,-315);
v(9.999999,-7.139998,-313.6385);
v(9.999999,0.5,-315);
v(9.999999,-0.5,-285);
v(9.999999,-0.5,-313.6385);
v(-9.999999,-0.5,-343.6385);
v(9.999999,0.5,-343.6385);
v(-9.999999,-7.139998,-343.6385);
v(-9.999999,0.5,-345);
v(-9.999999,0.5,-343.6385);
v(-8.424118,-0.5,-343.6385);
v(-9.999999,-0.5,-315);
v(-9.999999,-0.5,-343.6385);
v(8.495605,-0.5,-343.6385);
v(8.495605,-7.139998,-343.6385);
v(9.999999,-0.5,-343.6385);
v(9.999999,-0.5,-345);
v(8.495605,-7.139998,-345);
v(8.495605,-0.5,-345);
v(-9.999999,-7.139998,-345);
v(-9.999999,-0.5,-345);
v(8.495605,-0.5,-343.6385);
v(-8.424118,-0.5,-343.6385);
v(-8.424118,-7.139998,-345);
v(-8.424118,-7.139998,-343.6385);
v(-8.424118,-0.5,-345);
v(-8.424118,-0.5,-345);
v(8.495605,-0.5,-345);
v(9.999999,-7.139998,-345);
v(9.999999,-7.139998,-343.6385);
v(9.999999,0.5,-345);
v(9.999999,-0.5,-315);
v(9.999999,-0.5,-343.6385);
v(-9.999999,-0.5,-373.6385);
v(9.999999,0.5,-373.6385);
v(-9.999999,-7.139998,-373.6385);
v(-9.999999,0.5,-375);
v(-9.999999,0.5,-373.6385);
v(-8.424118,-0.5,-373.6385);
v(-9.999999,-0.5,-345);
v(-9.999999,-0.5,-373.6385);
v(8.495605,-0.5,-373.6385);
v(8.495605,-7.139998,-373.6385);
v(9.999999,-0.5,-373.6385);
v(9.999999,-0.5,-375);
v(8.495605,-7.139998,-375);
v(8.495605,-0.5,-375);
v(-9.999999,-7.139998,-375);
v(-9.999999,-0.5,-375);
v(8.495605,-0.5,-373.6385);
v(-8.424118,-0.5,-373.6385);
v(-8.424118,-7.139998,-375);
v(-8.424118,-7.139998,-373.6385);
v(-8.424118,-0.5,-375);
v(-8.424118,-0.5,-375);
v(8.495605,-0.5,-375);
v(9.999999,-7.139998,-375);
v(9.999999,-7.139998,-373.6385);
v(9.999999,0.5,-375);
v(9.999999,-0.5,-345);
v(9.999999,-0.5,-373.6385);
v(-9.999999,-0.5,-403.6385);
v(9.999999,0.5,-403.6385);
v(-9.999999,-7.139998,-403.6385);
v(-9.999999,0.5,-405);
v(-9.999999,0.5,-403.6385);
v(-8.424118,-0.5,-403.6385);
v(-9.999999,-0.5,-375);
v(-9.999999,-0.5,-403.6385);
v(8.495605,-0.5,-403.6385);
v(8.495605,-7.139998,-403.6385);
v(9.999999,-0.5,-403.6385);
v(9.999999,-0.5,-405);
v(8.495605,-7.139998,-405);
v(8.495605,-0.5,-405);
v(-9.999999,-7.139998,-405);
v(-9.999999,-0.5,-405);
v(8.495605,-0.5,-403.6385);
v(-8.424118,-0.5,-403.6385);
v(-8.424118,-7.139998,-405);
v(-8.424118,-7.139998,-403.6385);
v(-8.424118,-0.5,-405);
v(-8.424118,-0.5,-405);
v(8.495605,-0.5,-405);
v(9.999999,-7.139998,-405);
v(9.999999,-7.139998,-403.6385);
v(9.999999,0.5,-405);
v(9.999999,-0.5,-375);
v(9.999999,-0.5,-403.6385);
v(-9.999999,-0.5,-433.6385);
v(9.999999,0.5,-433.6385);
v(-9.999999,-7.139998,-433.6385);
v(-9.999999,0.5,-435);
v(-9.999999,0.5,-433.6385);
v(-8.424118,-0.5,-433.6385);
v(-9.999999,-0.5,-405);
v(-9.999999,-0.5,-433.6385);
v(8.495605,-0.5,-433.6385);
v(8.495605,-7.139998,-433.6385);
v(9.999999,-0.5,-433.6385);
v(9.999999,-0.5,-435);
v(8.495605,-7.139998,-435);
v(8.495605,-0.5,-435);
v(-9.999999,-7.139998,-435);
v(-9.999999,-0.5,-435);
v(8.495605,-0.5,-433.6385);
v(-8.424118,-0.5,-433.6385);
v(-8.424118,-7.139998,-435);
v(-8.424118,-7.139998,-433.6385);
v(-8.424118,-0.5,-435);
v(-8.424118,-0.5,-435);
v(8.495605,-0.5,-435);
v(9.999999,-7.139998,-435);
v(9.999999,-7.139998,-433.6385);
v(9.999999,0.5,-435);
v(9.999999,-0.5,-405);
v(9.999999,-0.5,-433.6385);
v(-9.999999,-0.5,-463.6385);
v(9.999999,0.5,-463.6385);
v(-9.999999,-7.139998,-463.6385);
v(-9.999999,0.5,-465);
v(-9.999999,0.5,-463.6385);
v(-8.424118,-0.5,-463.6385);
v(-9.999999,-0.5,-435);
v(-9.999999,-0.5,-463.6385);
v(8.495605,-0.5,-463.6385);
v(8.495605,-7.139998,-463.6385);
v(9.999999,-0.5,-463.6385);
v(9.999999,-0.5,-465);
v(8.495605,-7.139998,-465);
v(8.495605,-0.5,-465);
v(-9.999999,-7.139998,-465);
v(-9.999999,-0.5,-465);
v(8.495605,-0.5,-463.6385);
v(-8.424118,-0.5,-463.6385);
v(-8.424118,-7.139998,-465);
v(-8.424118,-7.139998,-463.6385);
v(-8.424118,-0.5,-465);
v(-8.424118,-0.5,-465);
v(8.495605,-0.5,-465);
v(9.999999,-7.139998,-465);
v(9.999999,-7.139998,-463.6385);
v(9.999999,0.5,-465);
v(9.999999,-0.5,-435);
v(9.999999,-0.5,-463.6385);
v(-9.999999,-0.5,-493.6385);
v(9.999999,0.5,-493.6385);
v(-9.999999,-7.139998,-493.6385);
v(-9.999999,0.5,-495);
v(-9.999999,0.5,-493.6385);
v(-8.424118,-0.5,-493.6385);
v(-9.999999,-0.5,-465);
v(-9.999999,-0.5,-493.6385);
v(8.495605,-0.5,-493.6385);
v(8.495605,-7.139998,-493.6385);
v(9.999999,-0.5,-493.6385);
v(9.999999,-0.5,-495);
v(8.495605,-7.139998,-495);
v(8.495605,-0.5,-495);
v(-9.999999,-7.139998,-495);
v(-9.999999,-0.5,-495);
v(8.495605,-0.5,-493.6385);
v(-8.424118,-0.5,-493.6385);
v(-8.424118,-7.139998,-495);
v(-8.424118,-7.139998,-493.6385);
v(-8.424118,-0.5,-495);
v(-8.424118,-0.5,-495);
v(8.495605,-0.5,-495);
v(9.999999,-7.139998,-495);
v(9.999999,-7.139998,-493.6385);
v(9.999999,0.5,-495);
v(9.999999,-0.5,-465);
v(9.999999,-0.5,-493.6385);

f3(31,8,29);
f3(16,8,31);
f3(27,20,26);
f3(22,20,27);
f3(412,410,409);
f3(882,412,409);
f3(385,412,882);
f3(384,385,882);
f3(387,385,384);
f3(854,387,384);
f3(360,387,854);
f3(359,360,854);
f3(362,360,359);
f3(826,362,359);
f3(335,362,826);
f3(334,335,826);
f3(337,335,334);
f3(798,337,334);
f3(310,337,798);
f3(309,310,798);
f3(312,310,309);
f3(770,312,309);
f3(285,312,770);
f3(284,285,770);
f3(287,285,284);
f3(742,287,284);
f3(260,287,742);
f3(259,260,742);
f3(262,260,259);
f3(714,262,259);
f3(235,262,714);
f3(234,235,714);
f3(237,235,234);
f3(686,237,234);
f3(210,237,686);
f3(209,210,686);
f3(212,210,209);
f3(658,212,209);
f3(185,212,658);
f3(184,185,658);
f3(187,185,184);
f3(630,187,184);
f3(160,187,630);
f3(159,160,630);
f3(162,160,159);
f3(602,162,159);
f3(135,162,602);
f3(134,135,602);
f3(137,135,134);
f3(574,137,134);
f3(110,137,574);
f3(109,110,574);
f3(112,110,109);
f3(546,112,109);
f3(85,112,546);
f3(84,85,546);
f3(87,85,84);
f3(518,87,84);
f3(60,87,518);
f3(59,60,518);
f3(62,60,59);
f3(490,62,59);
f3(35,62,490);
f3(34,35,490);
f3(37,35,34);
f3(462,37,34);
f3(7,37,462);
f3(6,7,462);
f3(9,7,6);
f3(432,9,6);
f3(1,9,432);
f3(0,1,432);
f3(17,437,447);
f3(13,17,447);
f3(23,17,13);
f3(19,23,13);
f3(433,23,19);
f3(3,433,19);
f3(434,6,28);
f3(432,6,434);
f3(413,407,408);
f3(414,413,408);
f3(382,413,414);
f3(383,382,414);
f3(388,382,383);
f3(389,388,383);
f3(357,388,389);
f3(358,357,389);
f3(363,357,358);
f3(364,363,358);
f3(332,363,364);
f3(333,332,364);
f3(338,332,333);
f3(339,338,333);
f3(307,338,339);
f3(308,307,339);
f3(313,307,308);
f3(314,313,308);
f3(282,313,314);
f3(283,282,314);
f3(288,282,283);
f3(289,288,283);
f3(257,288,289);
f3(258,257,289);
f3(263,257,258);
f3(264,263,258);
f3(232,263,264);
f3(233,232,264);
f3(238,232,233);
f3(239,238,233);
f3(207,238,239);
f3(208,207,239);
f3(213,207,208);
f3(214,213,208);
f3(182,213,214);
f3(183,182,214);
f3(188,182,183);
f3(189,188,183);
f3(157,188,189);
f3(158,157,189);
f3(163,157,158);
f3(164,163,158);
f3(132,163,164);
f3(133,132,164);
f3(138,132,133);
f3(139,138,133);
f3(107,138,139);
f3(108,107,139);
f3(113,107,108);
f3(114,113,108);
f3(82,113,114);
f3(83,82,114);
f3(88,82,83);
f3(89,88,83);
f3(57,88,89);
f3(58,57,89);
f3(63,57,58);
f3(64,63,58);
f3(32,63,64);
f3(33,32,64);
f3(38,32,33);
f3(39,38,33);
f3(4,38,39);
f3(5,4,39);
f3(10,4,5);
f3(11,10,5);
f3(2,10,11);
f3(435,2,11);
f3(438,439,440);
f3(12,439,438);
f3(18,12,438);
f3(25,441,442);
f3(443,441,25);
f3(445,444,24);
f3(446,444,445);
f3(448,14,30);
f3(449,14,448);
f3(452,451,453);
f3(454,451,452);
f3(457,10,458);
f3(4,10,457);
f3(450,18,438);
f3(460,18,450);
f3(461,460,450);
f3(56,36,54);
f3(42,36,56);
f3(52,45,51);
f3(47,45,52);
f3(43,466,436);
f3(15,43,436);
f3(48,43,15);
f3(44,48,15);
f3(463,48,44);
f3(459,463,44);
f3(464,34,53);
f3(462,34,464);
f3(455,456,450);
f3(467,456,455);
f3(468,467,455);
f3(469,467,468);
f3(50,470,471);
f3(472,470,50);
f3(474,473,49);
f3(475,473,474);
f3(476,40,55);
f3(477,40,476);
f3(480,479,481);
f3(482,479,480);
f3(485,38,486);
f3(32,38,485);
f3(478,456,467);
f3(488,456,478);
f3(489,488,478);
f3(81,61,79);
f3(67,61,81);
f3(77,70,76);
f3(72,70,77);
f3(68,494,465);
f3(41,68,465);
f3(73,68,41);
f3(69,73,41);
f3(491,73,69);
f3(487,491,69);
f3(492,59,78);
f3(490,59,492);
f3(483,484,478);
f3(495,484,483);
f3(496,495,483);
f3(497,495,496);
f3(75,498,499);
f3(500,498,75);
f3(502,501,74);
f3(503,501,502);
f3(504,65,80);
f3(505,65,504);
f3(508,507,509);
f3(510,507,508);
f3(513,63,514);
f3(57,63,513);
f3(506,484,495);
f3(516,484,506);
f3(517,516,506);
f3(106,86,104);
f3(92,86,106);
f3(102,95,101);
f3(97,95,102);
f3(93,522,493);
f3(66,93,493);
f3(98,93,66);
f3(94,98,66);
f3(519,98,94);
f3(515,519,94);
f3(520,84,103);
f3(518,84,520);
f3(511,512,506);
f3(523,512,511);
f3(524,523,511);
f3(525,523,524);
f3(100,526,527);
f3(528,526,100);
f3(530,529,99);
f3(531,529,530);
f3(532,90,105);
f3(533,90,532);
f3(536,535,537);
f3(538,535,536);
f3(541,88,542);
f3(82,88,541);
f3(534,512,523);
f3(544,512,534);
f3(545,544,534);
f3(131,111,129);
f3(117,111,131);
f3(127,120,126);
f3(122,120,127);
f3(118,550,521);
f3(91,118,521);
f3(123,118,91);
f3(119,123,91);
f3(547,123,119);
f3(543,547,119);
f3(548,109,128);
f3(546,109,548);
f3(539,540,534);
f3(551,540,539);
f3(552,551,539);
f3(553,551,552);
f3(125,554,555);
f3(556,554,125);
f3(558,557,124);
f3(559,557,558);
f3(560,115,130);
f3(561,115,560);
f3(564,563,565);
f3(566,563,564);
f3(569,113,570);
f3(107,113,569);
f3(562,540,551);
f3(572,540,562);
f3(573,572,562);
f3(156,136,154);
f3(142,136,156);
f3(152,145,151);
f3(147,145,152);
f3(143,578,549);
f3(116,143,549);
f3(148,143,116);
f3(144,148,116);
f3(575,148,144);
f3(571,575,144);
f3(576,134,153);
f3(574,134,576);
f3(567,568,562);
f3(579,568,567);
f3(580,579,567);
f3(581,579,580);
f3(150,582,583);
f3(584,582,150);
f3(586,585,149);
f3(587,585,586);
f3(588,140,155);
f3(589,140,588);
f3(592,591,593);
f3(594,591,592);
f3(597,138,598);
f3(132,138,597);
f3(590,568,579);
f3(600,568,590);
f3(601,600,590);
f3(181,161,179);
f3(167,161,181);
f3(177,170,176);
f3(172,170,177);
f3(168,606,577);
f3(141,168,577);
f3(173,168,141);
f3(169,173,141);
f3(603,173,169);
f3(599,603,169);
f3(604,159,178);
f3(602,159,604);
f3(595,596,590);
f3(607,596,595);
f3(608,607,595);
f3(609,607,608);
f3(175,610,611);
f3(612,610,175);
f3(614,613,174);
f3(615,613,614);
f3(616,165,180);
f3(617,165,616);
f3(620,619,621);
f3(622,619,620);
f3(625,163,626);
f3(157,163,625);
f3(618,596,607);
f3(628,596,618);
f3(629,628,618);
f3(206,186,204);
f3(192,186,206);
f3(202,195,201);
f3(197,195,202);
f3(193,634,605);
f3(166,193,605);
f3(198,193,166);
f3(194,198,166);
f3(631,198,194);
f3(627,631,194);
f3(632,184,203);
f3(630,184,632);
f3(623,624,618);
f3(635,624,623);
f3(636,635,623);
f3(637,635,636);
f3(200,638,639);
f3(640,638,200);
f3(642,641,199);
f3(643,641,642);
f3(644,190,205);
f3(645,190,644);
f3(648,647,649);
f3(650,647,648);
f3(653,188,654);
f3(182,188,653);
f3(646,624,635);
f3(656,624,646);
f3(657,656,646);
f3(231,211,229);
f3(217,211,231);
f3(227,220,226);
f3(222,220,227);
f3(218,662,633);
f3(191,218,633);
f3(223,218,191);
f3(219,223,191);
f3(659,223,219);
f3(655,659,219);
f3(660,209,228);
f3(658,209,660);
f3(651,652,646);
f3(663,652,651);
f3(664,663,651);
f3(665,663,664);
f3(225,666,667);
f3(668,666,225);
f3(670,669,224);
f3(671,669,670);
f3(672,215,230);
f3(673,215,672);
f3(676,675,677);
f3(678,675,676);
f3(681,213,682);
f3(207,213,681);
f3(674,652,663);
f3(684,652,674);
f3(685,684,674);
f3(256,236,254);
f3(242,236,256);
f3(252,245,251);
f3(247,245,252);
f3(243,690,661);
f3(216,243,661);
f3(248,243,216);
f3(244,248,216);
f3(687,248,244);
f3(683,687,244);
f3(688,234,253);
f3(686,234,688);
f3(679,680,674);
f3(691,680,679);
f3(692,691,679);
f3(693,691,692);
f3(250,694,695);
f3(696,694,250);
f3(698,697,249);
f3(699,697,698);
f3(700,240,255);
f3(701,240,700);
f3(704,703,705);
f3(706,703,704);
f3(709,238,710);
f3(232,238,709);
f3(702,680,691);
f3(712,680,702);
f3(713,712,702);
f3(281,261,279);
f3(267,261,281);
f3(277,270,276);
f3(272,270,277);
f3(268,718,689);
f3(241,268,689);
f3(273,268,241);
f3(269,273,241);
f3(715,273,269);
f3(711,715,269);
f3(716,259,278);
f3(714,259,716);
f3(707,708,702);
f3(719,708,707);
f3(720,719,707);
f3(721,719,720);
f3(275,722,723);
f3(724,722,275);
f3(726,725,274);
f3(727,725,726);
f3(728,265,280);
f3(729,265,728);
f3(732,731,733);
f3(734,731,732);
f3(737,263,738);
f3(257,263,737);
f3(730,708,719);
f3(740,708,730);
f3(741,740,730);
f3(306,286,304);
f3(292,286,306);
f3(302,295,301);
f3(297,295,302);
f3(293,746,717);
f3(266,293,717);
f3(298,293,266);
f3(294,298,266);
f3(743,298,294);
f3(739,743,294);
f3(744,284,303);
f3(742,284,744);
f3(735,736,730);
f3(747,736,735);
f3(748,747,735);
f3(749,747,748);
f3(300,750,751);
f3(752,750,300);
f3(754,753,299);
f3(755,753,754);
f3(756,290,305);
f3(757,290,756);
f3(760,759,761);
f3(762,759,760);
f3(765,288,766);
f3(282,288,765);
f3(758,736,747);
f3(768,736,758);
f3(769,768,758);
f3(331,311,329);
f3(317,311,331);
f3(327,320,326);
f3(322,320,327);
f3(318,774,745);
f3(291,318,745);
f3(323,318,291);
f3(319,323,291);
f3(771,323,319);
f3(767,771,319);
f3(772,309,328);
f3(770,309,772);
f3(763,764,758);
f3(775,764,763);
f3(776,775,763);
f3(777,775,776);
f3(325,778,779);
f3(780,778,325);
f3(782,781,324);
f3(783,781,782);
f3(784,315,330);
f3(785,315,784);
f3(788,787,789);
f3(790,787,788);
f3(793,313,794);
f3(307,313,793);
f3(786,764,775);
f3(796,764,786);
f3(797,796,786);
f3(356,336,354);
f3(342,336,356);
f3(352,345,351);
f3(347,345,352);
f3(343,802,773);
f3(316,343,773);
f3(348,343,316);
f3(344,348,316);
f3(799,348,344);
f3(795,799,344);
f3(800,334,353);
f3(798,334,800);
f3(791,792,786);
f3(803,792,791);
f3(804,803,791);
f3(805,803,804);
f3(350,806,807);
f3(808,806,350);
f3(810,809,349);
f3(811,809,810);
f3(812,340,355);
f3(813,340,812);
f3(816,815,817);
f3(818,815,816);
f3(821,338,822);
f3(332,338,821);
f3(814,792,803);
f3(824,792,814);
f3(825,824,814);
f3(381,361,379);
f3(367,361,381);
f3(377,370,376);
f3(372,370,377);
f3(368,830,801);
f3(341,368,801);
f3(373,368,341);
f3(369,373,341);
f3(827,373,369);
f3(823,827,369);
f3(828,359,378);
f3(826,359,828);
f3(819,820,814);
f3(831,820,819);
f3(832,831,819);
f3(833,831,832);
f3(375,834,835);
f3(836,834,375);
f3(838,837,374);
f3(839,837,838);
f3(840,365,380);
f3(841,365,840);
f3(844,843,845);
f3(846,843,844);
f3(849,363,850);
f3(357,363,849);
f3(842,820,831);
f3(852,820,842);
f3(853,852,842);
f3(406,386,404);
f3(392,386,406);
f3(402,395,401);
f3(397,395,402);
f3(393,858,829);
f3(366,393,829);
f3(398,393,366);
f3(394,398,366);
f3(855,398,394);
f3(851,855,394);
f3(856,384,403);
f3(854,384,856);
f3(847,848,842);
f3(859,848,847);
f3(860,859,847);
f3(861,859,860);
f3(400,862,863);
f3(864,862,400);
f3(866,865,399);
f3(867,865,866);
f3(868,390,405);
f3(869,390,868);
f3(872,871,873);
f3(874,871,872);
f3(877,388,878);
f3(382,388,877);
f3(870,848,859);
f3(880,848,870);
f3(881,880,870);
f3(431,411,429);
f3(417,411,431);
f3(427,420,426);
f3(422,420,427);
f3(418,886,857);
f3(391,418,857);
f3(423,418,391);
f3(419,423,391);
f3(883,423,419);
f3(879,883,419);
f3(884,409,428);
f3(882,409,884);
f3(875,876,870);
f3(887,876,875);
f3(888,887,875);
f3(889,887,888);
f3(425,890,891);
f3(892,890,425);
f3(894,893,424);
f3(895,893,894);
f3(896,415,430);
f3(897,415,896);
f3(900,899,901);
f3(902,899,900);
f3(898,903,904);
f3(887,903,898);
f3(876,887,898);
f3(905,413,906);
f3(407,413,905);
f3(908,898,909);
f3(876,898,908);
f3(17,436,437);
f3(15,436,17);
f3(21,15,17);
f3(455,450,438);
f3(23,21,17);
f3(459,21,23);
f3(433,459,23);
f3(43,465,466);
f3(41,465,43);
f3(46,41,43);
f3(483,478,467);
f3(48,46,43);
f3(487,46,48);
f3(463,487,48);
f3(68,493,494);
f3(66,493,68);
f3(71,66,68);
f3(511,506,495);
f3(73,71,68);
f3(515,71,73);
f3(491,515,73);
f3(93,521,522);
f3(91,521,93);
f3(96,91,93);
f3(539,534,523);
f3(98,96,93);
f3(543,96,98);
f3(519,543,98);
f3(118,549,550);
f3(116,549,118);
f3(121,116,118);
f3(567,562,551);
f3(123,121,118);
f3(571,121,123);
f3(547,571,123);
f3(143,577,578);
f3(141,577,143);
f3(146,141,143);
f3(595,590,579);
f3(148,146,143);
f3(599,146,148);
f3(575,599,148);
f3(168,605,606);
f3(166,605,168);
f3(171,166,168);
f3(623,618,607);
f3(173,171,168);
f3(627,171,173);
f3(603,627,173);
f3(193,633,634);
f3(191,633,193);
f3(196,191,193);
f3(651,646,635);
f3(198,196,193);
f3(655,196,198);
f3(631,655,198);
f3(218,661,662);
f3(216,661,218);
f3(221,216,218);
f3(679,674,663);
f3(223,221,218);
f3(683,221,223);
f3(659,683,223);
f3(243,689,690);
f3(241,689,243);
f3(246,241,243);
f3(707,702,691);
f3(248,246,243);
f3(711,246,248);
f3(687,711,248);
f3(268,717,718);
f3(266,717,268);
f3(271,266,268);
f3(735,730,719);
f3(273,271,268);
f3(739,271,273);
f3(715,739,273);
f3(293,745,746);
f3(291,745,293);
f3(296,291,293);
f3(763,758,747);
f3(298,296,293);
f3(767,296,298);
f3(743,767,298);
f3(318,773,774);
f3(316,773,318);
f3(321,316,318);
f3(791,786,775);
f3(323,321,318);
f3(795,321,323);
f3(771,795,323);
f3(343,801,802);
f3(341,801,343);
f3(346,341,343);
f3(819,814,803);
f3(348,346,343);
f3(823,346,348);
f3(799,823,348);
f3(368,829,830);
f3(366,829,368);
f3(371,366,368);
f3(847,842,831);
f3(373,371,368);
f3(851,371,373);
f3(827,851,373);
f3(393,857,858);
f3(391,857,393);
f3(396,391,393);
f3(875,870,859);
f3(398,396,393);
f3(879,396,398);
f3(855,879,398);
f3(418,416,885);
f3(421,416,418);
f3(423,421,418);
f3(907,421,423);
f3(883,907,423);
f3(886,418,885);


	this.computeCentroids();
	this.computeFaceNormals();
	this.sortFacesByMaterial();

	function v( x, y, z ) {
		scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );
	}

	function f3( a, b, c ) {
		scope.faces.push( new THREE.Face3( a, b, c ) );
	}
}

Subway.prototype = new THREE.Geometry();
Subway.prototype.constructor = Subway;

var Tunnel = function () {

var scope = this;
THREE.Geometry.call( this );

v(-41.66666,-12.5,50);
v(-41.66666,12.5,50);
v(41.66666,-12.5,50);
v(41.66666,12.5,50);
v(41.66666,-12.5,-50);
v(41.66666,12.5,-50);
v(-41.66666,-12.5,-50);
v(-41.66666,12.5,-50);
v(12.48016,-12.5,50);
v(-12.48016,-12.5,50);
v(12.07407,-9.415419,50);
v(10.82532,-6.400657,50);
v(8.838836,-3.811822,50);
v(6.25,-1.825339,50);
v(3.235237,-0.5765839,50);
v(-3.235237,-0.5765839,50);
v(-6.25,-1.82534,50);
v(-8.838836,-3.811822,50);
v(-10.82532,-6.400656,50);
v(-12.07407,-9.41542,50);
v(0,-0.1506567,50);
v(12.48016,-12.5,0.7056274);
v(0.2609406,-12.5,0.7056274);
v(0.5622482,-12.5,0.7056274);
v(0.1506577,-12.5,0.7056274);
v(0.08698272,-12.5,0.7056274);
v(0.04036713,-12.5,0.7056274);
v(0,-12.5,0.7056274);
v(-0.04036713,-12.5,0.7056274);
v(-0.08698272,-12.5,0.7056274);
v(-0.1506577,-12.5,0.7056274);
v(-0.2609406,-12.5,0.7056274);
v(-0.5622482,-12.5,0.7056274);
v(-12.48016,-12.5,0.7056274);
v(12.07407,-9.415417,0.7056274);
v(10.82532,-6.400654,0.7056274);
v(8.838836,-3.81182,0.7056274);
v(6.25,-1.825337,0.7056274);
v(3.235237,-0.576582,0.7056274);
v(0,-0.1506548,0.7056274);
v(-3.235237,-0.576582,0.7056274);
v(-6.25,-1.825338,0.7056274);
v(-8.838836,-3.81182,0.7056274);
v(-10.82532,-6.400653,0.7056274);
v(-12.07407,-9.415417,0.7056274);
v(-12.07407,-9.415421,50);
v(41.66666,12.5,50);
v(41.66666,-12.5,50);
v(41.66666,12.5,-50);
v(41.66666,-12.5,-50);
v(-41.66666,-12.5,50);
v(-41.66666,12.5,-50);
v(-41.66666,12.5,50);
v(-41.66666,-12.5,-50);
v(41.66666,12.5,50);
v(-41.66666,12.5,-50);
v(41.66666,12.5,-50);
v(-41.66666,12.5,50);
v(-41.66666,-12.5,50);
v(-12.48016,-12.5,50);
v(-41.66666,-12.5,-50);
v(41.66666,-12.5,-50);
v(12.48016,-12.5,50);
v(41.66666,-12.5,50);
v(0.5622482,-12.5,0.7056274);
v(0.04036713,-12.5,0.7056274);
v(0.5622482,-12.5,0.7056274);
v(12.48016,-12.5,0.7056274);
v(12.48016,-12.5,0.7056274);
v(12.07407,-9.415419,50);
v(12.48016,-12.5,50);
v(12.07407,-9.415417,0.7056274);
v(0.2609406,-12.5,0.7056274);
v(10.82532,-6.400657,50);
v(10.82532,-6.400654,0.7056274);
v(0.1506577,-12.5,0.7056274);
v(8.838836,-3.811822,50);
v(8.838836,-3.81182,0.7056274);
v(0.08698272,-12.5,0.7056274);
v(8.838836,-3.81182,0.7056274);
v(6.25,-1.825339,50);
v(8.838836,-3.811822,50);
v(6.25,-1.825337,0.7056274);
v(0.04036713,-12.5,0.7056274);
v(3.235237,-0.5765839,50);
v(3.235237,-0.576582,0.7056274);
v(0,-12.5,0.7056274);
v(0,-0.1506567,50);
v(0,-0.1506548,0.7056274);
v(-0.04036713,-12.5,0.7056274);
v(-3.235237,-0.5765839,50);
v(-3.235237,-0.576582,0.7056274);
v(-0.08698272,-12.5,0.7056274);
v(-6.25,-1.82534,50);
v(-6.25,-1.825338,0.7056274);
v(-0.1506577,-12.5,0.7056274);
v(-8.838836,-3.811822,50);
v(-8.838836,-3.81182,0.7056274);
v(-0.2609406,-12.5,0.7056274);
v(-8.838836,-3.81182,0.7056274);
v(-10.82532,-6.400656,50);
v(-8.838836,-3.811822,50);
v(-10.82532,-6.400653,0.7056274);
v(-0.5622482,-12.5,0.7056274);
v(-12.07407,-9.415417,0.7056274);
v(-12.48016,-12.5,0.7056274);
v(-12.48016,-12.5,0.7056274);
v(-12.48016,-12.5,50);
v(-41.66666,-12.5,-50);
v(-0.1506577,-12.5,0.7056274);
v(0.04036713,-12.5,0.7056274);

f3(3,12,11);
f3(10,3,11);
f3(2,3,10);
f3(8,2,10);
f3(1,19,18);
f3(9,19,1);
f3(0,9,1);
f3(46,4,5);
f3(47,4,46);
f3(48,6,7);
f3(49,6,48);
f3(51,50,52);
f3(53,50,51);
f3(55,54,56);
f3(57,54,55);
f3(60,31,32);
f3(33,60,32);
f3(58,60,33);
f3(59,58,33);
f3(23,25,26);
f3(24,25,23);
f3(22,24,23);
f3(60,64,110);
f3(21,64,60);
f3(61,21,60);
f3(62,21,61);
f3(63,62,61);
f3(60,30,31);
f3(108,29,109);
f3(28,29,108);
f3(27,28,108);
f3(108,65,27);
f3(72,35,36);
f3(34,35,72);
f3(66,34,72);
f3(67,34,66);
f3(74,76,77);
f3(73,76,74);
f3(71,73,74);
f3(69,73,71);
f3(68,69,71);
f3(70,69,68);
f3(94,96,97);
f3(93,96,94);
f3(91,93,94);
f3(90,93,91);
f3(88,90,91);
f3(87,90,88);
f3(85,87,88);
f3(84,87,85);
f3(82,84,85);
f3(80,84,82);
f3(79,80,82);
f3(81,80,79);
f3(100,99,101);
f3(102,99,100);
f3(45,102,100);
f3(104,102,45);
f3(106,104,45);
f3(92,40,41);
f3(42,92,41);
f3(95,92,42);
f3(43,95,42);
f3(98,95,43);
f3(44,98,43);
f3(103,98,44);
f3(105,103,44);
f3(106,45,107);
f3(1,16,15);
f3(17,16,1);
f3(18,17,1);
f3(3,13,12);
f3(14,13,3);
f3(20,14,3);
f3(3,15,20);
f3(1,15,3);
f3(78,37,38);
f3(36,37,78);
f3(75,36,78);
f3(72,36,75);
f3(39,89,86);
f3(83,39,86);
f3(38,39,83);
f3(78,38,83);
f3(89,40,92);
f3(39,40,89);


	this.computeCentroids();
	this.computeFaceNormals();
	this.sortFacesByMaterial();

	function v( x, y, z ) {
		scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );
	}

	function f3( a, b, c ) {
		scope.faces.push( new THREE.Face3( a, b, c ) );
	}
}

Tunnel.prototype = new THREE.Geometry();
Tunnel.prototype.constructor = Tunnel;

function BuildScene() {
scene = new THREE.Scene();
bldg1_1 = new THREE.Mesh( new Bldg1_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg1_1.overdraw = true;
bldg1_1.position = new THREE.Vector3(-192.1984,0,-36.45847);
bldg1_1.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg1_1);
bldg1_2 = new THREE.Mesh( new Bldg1_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg1_2.overdraw = true;
bldg1_2.position = new THREE.Vector3(134.5112,0,36.70001);
bldg1_2.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg1_2);
bldg1_3 = new THREE.Mesh( new Bldg1_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg1_3.overdraw = true;
bldg1_3.position = new THREE.Vector3(132.9111,0,-82.50491);
bldg1_3.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg1_3);
bldg1_4 = new THREE.Mesh( new Bldg1_1() , new THREE.MeshLambertMaterial( { color: 0xF34F4F, shading: THREE.FlatShading } ) );
bldg1_4.overdraw = true;
bldg1_4.position = new THREE.Vector3(-63.0971,0,-76.90468);
bldg1_4.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg1_4);
bldg1_5 = new THREE.Mesh( new Bldg1_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg1_5.overdraw = true;
bldg1_5.position = new THREE.Vector3(-137.5002,0,-97.70558);
bldg1_5.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg1_5);
bldg1_6 = new THREE.Mesh( new Bldg1_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg1_6.overdraw = true;
bldg1_6.position = new THREE.Vector3(-27.89569,0,-77.70464);
bldg1_6.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg1_6);
bldg1_7 = new THREE.Mesh( new Bldg1_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg1_7.overdraw = true;
bldg1_7.position = new THREE.Vector3(66.50825,0,-141.7074);
bldg1_7.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg1_7);
bldg1_8 = new THREE.Mesh( new Bldg1_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg1_8.overdraw = true;
bldg1_8.position = new THREE.Vector3(-66.2973,0,111.9031);
bldg1_8.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg1_8);
bldg1_9 = new THREE.Mesh( new Bldg1_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg1_9.overdraw = true;
bldg1_9.position = new THREE.Vector3(-137.5002,0,198.3396);
bldg1_9.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg1_9);
bldg1_10 = new THREE.Mesh( new Bldg1_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg1_10.overdraw = true;
bldg1_10.position = new THREE.Vector3(206.3589,0,36.70001);
bldg1_10.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg1_10);
bldg2_1 = new THREE.Mesh( new Bldg2_1() , new THREE.MeshLambertMaterial( { color: 0x7BBCDC, shading: THREE.FlatShading } ) );
bldg2_1.overdraw = true;
bldg2_1.position = new THREE.Vector3(-64.12248,0,37.5);
bldg2_1.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg2_1);
bldg2_2 = new THREE.Mesh( new Bldg2_1() , new THREE.MeshLambertMaterial( { color: 0x7BBCDC, shading: THREE.FlatShading } ) );
bldg2_2.overdraw = true;
bldg2_2.position = new THREE.Vector3(29.48145,0,-34.50291);
bldg2_2.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg2_2);
bldg2_3 = new THREE.Mesh( new Bldg2_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg2_3.overdraw = true;
bldg2_3.position = new THREE.Vector3(-63.32241,0,-112.9061);
bldg2_3.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg2_3);
bldg2_4 = new THREE.Mesh( new Bldg2_1() , new THREE.MeshLambertMaterial( { color: 0x838383, shading: THREE.FlatShading } ) );
bldg2_4.overdraw = true;
bldg2_4.position = new THREE.Vector3(133.486,0,-117.7064);
bldg2_4.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg2_4);
bldg2_5 = new THREE.Mesh( new Bldg2_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg2_5.overdraw = true;
bldg2_5.position = new THREE.Vector3(133.486,0,110.3031);
bldg2_5.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg2_5);
bldg2_6 = new THREE.Mesh( new Bldg2_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg2_6.overdraw = true;
bldg2_6.position = new THREE.Vector3(65.48313,0,77.5017);
bldg2_6.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg2_6);
bldg2_7 = new THREE.Mesh( new Bldg2_1() , new THREE.MeshLambertMaterial( { color: 0x7BBCDC, shading: THREE.FlatShading } ) );
bldg2_7.overdraw = true;
bldg2_7.position = new THREE.Vector3(67.20168,0,-105.8537);
bldg2_7.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg2_7);
bldg2_8 = new THREE.Mesh( new Bldg2_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg2_8.overdraw = true;
bldg2_8.position = new THREE.Vector3(-188.3347,0,34.4481);
bldg2_8.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg2_8);
bldg2_9 = new THREE.Mesh( new Bldg2_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg2_9.overdraw = true;
bldg2_9.position = new THREE.Vector3(28.68161,0,77.5017);
bldg2_9.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg2_9);
bldg2_10 = new THREE.Mesh( new Bldg2_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg2_10.overdraw = true;
bldg2_10.position = new THREE.Vector3(-64.12248,0,184.0029);
bldg2_10.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg2_10);
bldg2_11 = new THREE.Mesh( new Bldg2_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg2_11.overdraw = true;
bldg2_11.position = new THREE.Vector3(189.5062,0,-34.50291);
bldg2_11.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg2_11);
bldg2_12 = new THREE.Mesh( new Bldg2_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg2_12.overdraw = true;
bldg2_12.position = new THREE.Vector3(133.486,0,-150.0484);
bldg2_12.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg2_12);
bldg3_1 = new THREE.Mesh( new Bldg3_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg3_1.overdraw = true;
bldg3_1.position = new THREE.Vector3(-29.71158,0,37.5);
bldg3_1.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg3_1);
bldg3_2 = new THREE.Mesh( new Bldg3_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg3_2.overdraw = true;
bldg3_2.position = new THREE.Vector3(171.8968,0,37.5);
bldg3_2.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg3_2);
bldg3_3 = new THREE.Mesh( new Bldg3_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg3_3.overdraw = true;
bldg3_3.position = new THREE.Vector3(68.04024,0,-70.47506);
bldg3_3.rotation = new THREE.Vector3(0,-1.570796,0);
scene.addObject(bldg3_3);
bldg3_4 = new THREE.Mesh( new Bldg3_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg3_4.overdraw = true;
bldg3_4.position = new THREE.Vector3(-134.5752,0,86.68718);
bldg3_4.rotation = new THREE.Vector3(0,-1.570796,0);
scene.addObject(bldg3_4);
bldg3_5 = new THREE.Mesh( new Bldg3_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg3_5.overdraw = true;
bldg3_5.position = new THREE.Vector3(-66.51308,0,147.1045);
bldg3_5.rotation = new THREE.Vector3(0,-1.570796,0);
scene.addObject(bldg3_5);
bldg3_6 = new THREE.Mesh( new Bldg3_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg3_6.overdraw = true;
bldg3_6.position = new THREE.Vector3(-136.116,0,-132.1071);
bldg3_6.rotation = new THREE.Vector3(0,-1.570796,0);
scene.addObject(bldg3_6);
bldg3_7 = new THREE.Mesh( new Bldg3_1() , new THREE.MeshLambertMaterial( { color: 0xF34F4F, shading: THREE.FlatShading } ) );
bldg3_7.overdraw = true;
bldg3_7.position = new THREE.Vector3(-66.51308,0,218.4219);
bldg3_7.rotation = new THREE.Vector3(0,-1.570796,0);
scene.addObject(bldg3_7);
bldg4_1 = new THREE.Mesh( new Bldg4_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg4_1.overdraw = true;
bldg4_1.position = new THREE.Vector3(29.74092,0,37.5);
bldg4_1.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg4_1);
bldg4_2 = new THREE.Mesh( new Bldg4_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg4_2.overdraw = true;
bldg4_2.position = new THREE.Vector3(132.1452,0,-181.7091);
bldg4_2.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg4_2);
bldg5_1 = new THREE.Mesh( new Bldg5_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg5_1.overdraw = true;
bldg5_1.position = new THREE.Vector3(-63.46773,0,-34.09188);
bldg5_1.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg5_1);
bldg5_2 = new THREE.Mesh( new Bldg5_1() , new THREE.MeshLambertMaterial( { color: 0xDDF3C6, shading: THREE.FlatShading } ) );
bldg5_2.overdraw = true;
bldg5_2.position = new THREE.Vector3(-28.34057,0,73.91264);
bldg5_2.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg5_2);
bldg5_3 = new THREE.Mesh( new Bldg5_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg5_3.overdraw = true;
bldg5_3.position = new THREE.Vector3(-63.46773,0,-149.652);
bldg5_3.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg5_3);
bldg5_4 = new THREE.Mesh( new Bldg5_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg5_4.overdraw = true;
bldg5_4.position = new THREE.Vector3(133.3405,0,73.91264);
bldg5_4.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg5_4);
bldg6_1 = new THREE.Mesh( new Bldg6_1() , new THREE.MeshLambertMaterial( { color: 0xDDF3C6, shading: THREE.FlatShading } ) );
bldg6_1.overdraw = true;
bldg6_1.position = new THREE.Vector3(-137.658,0,-41.53566);
bldg6_1.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg6_1);
bldg6_2 = new THREE.Mesh( new Bldg6_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg6_2.overdraw = true;
bldg6_2.position = new THREE.Vector3(-134.027,0,33.9099);
bldg6_2.rotation = new THREE.Vector3(0,-4.712389,0);
scene.addObject(bldg6_2);
bldg6_3 = new THREE.Mesh( new Bldg6_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg6_3.overdraw = true;
bldg6_3.position = new THREE.Vector3(133.3022,0,-32.34458);
bldg6_3.rotation = new THREE.Vector3(0,-1.570796,0);
scene.addObject(bldg6_3);
bldg7_1 = new THREE.Mesh( new Bldg7_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg7_1.overdraw = true;
bldg7_1.position = new THREE.Vector3(-29.27319,0,-35.68818);
bldg7_1.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg7_1);
bldg7_2 = new THREE.Mesh( new Bldg7_1() , new THREE.MeshLambertMaterial( { color: 0x838383, shading: THREE.FlatShading } ) );
bldg7_2.overdraw = true;
bldg7_2.position = new THREE.Vector3(-134.8776,0,123.1629);
bldg7_2.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg7_2);
bldg8_1 = new THREE.Mesh( new Bldg8_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg8_1.overdraw = true;
bldg8_1.position = new THREE.Vector3(100.3863,17.67184,-223.9485);
bldg8_1.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg8_1);
bldg8_3 = new THREE.Mesh( new Bldg8_1() , new THREE.MeshLambertMaterial( { color: 0xDDF3C6, shading: THREE.FlatShading } ) );
bldg8_3.overdraw = true;
bldg8_3.position = new THREE.Vector3(67.60629,-0.2202222,35.17422);
bldg8_3.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg8_3);
bldg8_2 = new THREE.Mesh( new Bldg8_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg8_2.overdraw = true;
bldg8_2.position = new THREE.Vector3(-137.1702,0,161.4162);
bldg8_2.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg8_2);
bldg9_1 = new THREE.Mesh( new Bldg9_1() , new THREE.MeshLambertMaterial( { color: 0xF34F4F, shading: THREE.FlatShading } ) );
bldg9_1.overdraw = true;
bldg9_1.position = new THREE.Vector3(66.73944,40,-35.20121);
bldg9_1.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg9_1);
bldg9_2 = new THREE.Mesh( new Bldg9_1() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
bldg9_2.overdraw = true;
bldg9_2.position = new THREE.Vector3(-66.86611,40,76.00342);
bldg9_2.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg9_2);
bldg9_3 = new THREE.Mesh( new Bldg9_1() , new THREE.MeshLambertMaterial( { color: 0xDDF3C6, shading: THREE.FlatShading } ) );
bldg9_3.overdraw = true;
bldg9_3.position = new THREE.Vector3(67.53952,40,-179.2072);
bldg9_3.rotation = new THREE.Vector3(0,0,0);
scene.addObject(bldg9_3);
ground = new THREE.Mesh( new Ground() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
ground.overdraw = true;
ground.position = new THREE.Vector3(0,0,0);
ground.rotation = new THREE.Vector3(0,0,0);
scene.addObject(ground);
streets = new THREE.Mesh( new Streets() , new THREE.MeshLambertMaterial( { color: 0x838383, shading: THREE.FlatShading } ) );
streets.overdraw = true;
streets.position = new THREE.Vector3(0,0,0);
streets.rotation = new THREE.Vector3(0,0,0);
scene.addObject(streets);
subway = new THREE.Mesh( new Subway() , new THREE.MeshLambertMaterial( { color: 0x838383, shading: THREE.FlatShading } ) );
subway.overdraw = true;
subway.position = new THREE.Vector3(0,6.989082,239.4365);
subway.rotation = new THREE.Vector3(0,0,0);
scene.addObject(subway);
tunnel = new THREE.Mesh( new Tunnel() , new THREE.MeshLambertMaterial( { color: 0xFFFFFF, shading: THREE.FlatShading } ) );
tunnel.overdraw = true;
tunnel.position = new THREE.Vector3(100,12.40166,-250.5932);
tunnel.rotation = new THREE.Vector3(0,0,0);
scene.addObject(tunnel);
}

function CreateCamera() {
var camera = new THREE.Camera( 60, window.innerWidth / window.innerHeight, 0.3, 1000 );
camera.position = new THREE.Vector3(67.51747,251.516,-261.4746);
camera.rotation = new THREE.Vector3(0.7393803,-0.2840209,0.1782153);
return camera;
}

function CreateLight(){
var ambient = new THREE.AmbientLight( 0x101010 );
scene.addLight( ambient );

directionalLight = new THREE.DirectionalLight( 0xffffff );
directionalLight.position = new THREE.Vector3(-0.3343177,0.893399,-0.3001166);
directionalLight.rotation = new THREE.Vector3(1.275719,-5.533706,5.541511);
scene.addLight( directionalLight );
}