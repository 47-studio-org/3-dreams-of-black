JSF = {};JSF.tab = [];JSF.topLevelComp = true;JSF.planeNames = {};JSF.nestedLayers = [];JSF.startDocument = function(n) {    log("Started doc: '" + n + "'");    var o = JSF.tab.join("") + "%0 = {".format(n);    JSF.tab.push("\t");    return o;}JSF.endDocument = function() {    JSF.tab.pop();    return JSF.tab.join("") + "};";}JSF.startObject = function(n) {    var o;        if(!n || n == "")         o = JSF.tab.join("") + "{";    else         o = JSF.tab.join("") + "%0: {".format( cleanName(n) );            JSF.tab.push("\t");    return o;}JSF.closeObject = function() {    JSF.tab.pop();    return JSF.tab.join("") + "},";}JSF.startArray = function(n) {    var o = JSF.tab.join("") + "%0: [".format( cleanName(n) );    JSF.tab.push("\t");    return o;}JSF.closeArray = function() {    JSF.tab.pop();    return JSF.tab.join("") + "],";}JSF.formatVector3 = function(n, p) {    var x = p[0].toFixed(precision);    var y = p[1].toFixed(precision);    var z = p[2].toFixed(precision);        return JSF.tab.join("") + "%0: {  x:%1, y:%2, z:%3 },".format(n, x, y, z);}JSF.formatString = function(n, s) {    return JSF.tab.join("") + "%0: \"%1\",".format(n, s);}JSF.formatBool = function(n, b) {    return JSF.tab.join("") + "%0: %1,".format(n, b);}JSF.formatNumber = function(n, f) {    return JSF.tab.join("") + "%0: %1,".format(n, f.toFixed(precision));}String.prototype.format = function() {    var formatted = this;    for(arg in arguments) {        formatted = formatted.replace("%" + arg, arguments[arg]);    }    return formatted;};JSF.adaptPosition = function(p) {    p[1] *= -1;    p[2] *= -1;    return p;}JSF.adaptScale = function(p) {    p[0] *= 0.01;    p[1] *= 0.01;    p[2] *= 0.01;    return p;}JSF.adaptRotation = function(p) {    p[0] *= Math.PI/180;    p[1] *= -Math.PI/180;    p[2] *= -Math.PI/180;    return p;}JSF.exportCameras = function(f, cs) {    f.writeln( JSF.startObject("cameras") );        for(var cp in cs) {        var c = cs[cp];             var p = JSF.adaptPosition(c.position.valueAtTime(0, true));        var t = JSF.adaptPosition(c.pointOfInterest.valueAtTime(0, true));                f.writeln( JSF.startObject(c.name) );        f.writeln( JSF.formatVector3("position", p) );        f.writeln( JSF.formatVector3("target", t) );                JSF.checkAnimation (f, c);                f.writeln( JSF.closeObject() );    }            f.writeln( JSF.closeObject() );}JSF.exportComposition = function(comp, isTopLevel) {    var layers = {};    var itl = isTopLevel || false;        for(var i = 1; i <= comp.layers.length; i++) {        var ly = comp.layers[i];        ly.type = getLayerType(ly);        if(!layers[ly.type]) layers[ly.type] = [];        layers[ly.type].push(ly);    }    if(layers["Camera"])         JSF.exportCameras(efile, layers["Camera"]);            if(layers["AV"]) {        if(itl) efile.writeln( JSF.startObject("planes") );        JSF.exportAVs(efile, layers["AV"], texFolder);        if(itl) efile.writeln( JSF.closeObject() );    }}JSF.exportAVs = function(f, ts, texFolder) {    for(var tp in ts) {        var t = ts[tp];                   if(!t.enabled) continue;                if(t.source.typeName == "Footage") {               JSF.exportFootage(f, t, texFolder);            JSF.copyImage(f, t);        } else if(t.source.typeName == "Composition") {            JSF.nestedLayers.push(t);            JSF.exportComposition(t.source, false);            JSF.nestedLayers.pop();        }    }    }JSF.copyImage = function(f, t) {    if(t.source.mainSource.isStill) {        t.source.mainSource.file.copy(f.path +"/"+ t.source.mainSource.file.name);    } else {        //log( t.source );    }}JSF.exportFootage = function(f, t, texFolder) {    var p = JSF.adaptPosition( t.position.valueAtTime(0, true) );    var s = JSF.adaptScale( t.scale.valueAtTime(0, true) );    var r = JSF.adaptRotation( t.orientation.valueAtTime(0, true) );                var tn = t.name;    var ot = tn;    var c = 0;    while(JSF.planeNames[tn]) tn = ot + c++;    f.writeln( JSF.startObject(tn) );    JSF.planeNames[tn] = true;        f.writeln( JSF.formatVector3("position", p) );    f.writeln( JSF.formatVector3("scale", s) );    f.writeln( JSF.formatVector3("rotation", r) );    f.writeln( JSF.formatString("texture", texFolder + t.source.mainSource.file.name ) );        f.writeln( JSF.formatBool("isSequence", (!t.source.mainSource.isStill) ) );        if(!t.source.mainSource.isStill)         f.writeln( JSF.formatBool("fps", t.source.mainSource.displayFrameRate ) );        f.writeln( JSF.formatNumber("width", t.source.width ) );    f.writeln( JSF.formatNumber("height", t.source.height ) );             JSF.checkAnimation (f, t);                f.writeln( JSF.closeObject() );}JSF.checkAnimation = function(f, ly) {    var isAnimated = false;        for(var pn in ly) {        var p = ly[pn];        if(p instanceof Property && p.isTimeVarying) isAnimated = true;    }    for(var i = 0; i < JSF.nestedLayers.length; i++) {        var nly = JSF.nestedLayers[i];        for(var pn in nly) {            var p = nly[pn];            if(p instanceof Property && p.isTimeVarying) isAnimated = true;        }    }        if(!isAnimated) return false;        f.writeln( JSF.startArray("keyframes") );    for(var i = 0; i < totalTime; i += samplingRate) {        f.writeln( JSF.startObject() );        f.writeln( JSF.tab.join("") + "time: %0,".format( i.toFixed(3) ) );                    JSF.exportKeyframePostion(f, ly["position"], i, ly["scale"]);                JSF.exportKeyframeOrientation(f, ly["orientation"], i);                          f.writeln( JSF.closeObject() );    }            f.writeln( JSF.closeArray() );}JSF.exportKeyframePostion = function(f, p, t, s) {    var isAnimated = p.isTimeVarying;        var v = JSF.adaptPosition( p.valueAtTime(t, false) );        v[0] *= s.valueAtTime(t, false)[0] / 100;    v[1] *= s.valueAtTime(t, false)[1] / 100;    v[2] *= s.valueAtTime(t, false)[2] / 100;        for(var i = 0; i < JSF.nestedLayers.length; i++) {        if(!isAnimated) {            isAnimated =  JSF.nestedLayers[i]["position"].isTimeVarying;        }                var np = JSF.adaptPosition( JSF.nestedLayers[i]["position"].valueAtTime(t, false) );        var ns = JSF.nestedLayers[i]["scale"].valueAtTime(t, false);        v[0] += np[0] * (ns[0] / 100);        v[1] += np[1] * (ns[1] / 100);        v[2] += np[2] * (ns[2] / 100);    }    if(!isAnimated) return;            f.writeln( JSF.tab.join("") + "px: %0,".format(v[0].toFixed(precision)) );    f.writeln( JSF.tab.join("") + "py: %0,".format(v[1].toFixed(precision)) );    f.writeln( JSF.tab.join("") + "pz: %0,".format(v[2].toFixed(precision)) );}JSF.exportKeyframeOrientation = function(f, p, t) {    var isAnimated = p.isTimeVarying;        var v = JSF.adaptRotation( p.valueAtTime(t, false) );        for(var i = 0; i < JSF.nestedLayers.length; i++) {        if(!isAnimated) {            isAnimated =  JSF.nestedLayers[i]["orientation"].isTimeVarying;        }                var np = JSF.adaptRotation( JSF.nestedLayers[i]["orientation"].valueAtTime(t, false) );        v[0] += np[0];        v[1] += np[1];        v[2] += np[2];    }    if(!isAnimated) return;            f.writeln( JSF.tab.join("") + "rx: %0,".format(v[0].toFixed(precision)) );    f.writeln( JSF.tab.join("") + "ry: %0,".format(v[1].toFixed(precision)) );    f.writeln( JSF.tab.join("") + "rz: %0,".format(v[2].toFixed(precision)) );}